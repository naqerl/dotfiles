(defwindow bar
           :geometry (geometry
                       :width "1600"
                       :anchor "top center")
           :monitor 0
           :exclusive true
           (bar))

(defwidget bar []
           (centerbox :class "bg-transparent"
                :style "padding: 4px;"
                :orientation "h"
                (left)
                (center)
                (right)))

(defwidget left []
           (box
            :orientation "h"
            :space-evenly false
            :halign "start"
            (container
             :bg "dark"
             :right {playing_reveal == 't' && playing_reveal_manual == 't' ? "dark2dark" : "dark"}
             :fg "light"
             (box
              :space-evenly false
              (space)
              (space)
              (text :content current_workspace_name)
              (space)
              (space)))
            (space)
            (mpv_player)
            (space)
            (notification)))

(defwidget center []
           (box
            :orientation "h"
            :space-evenly false
            :halign "center"
            (container
             :bg "dark"
             :left "dark"
             :right {emacs_focused == "t" && emacs_buffer_modifier != "" ? "dark2dark" : "dark"}
             :fg "light"
             (box
              :space-evenly false
              (revealer  ;; Left Emacs status
               :transition "slideleft"
               :reveal {emacs_focused == "t"}
               :duration "300ms"
               (box :class "box"
                    :orientation "h"
                    :space-evenly false
                    :hexpand false
                    :halign "start"
                    :width 300
                    (label
                     :class "fg-purple"
                     :text {"  "})
                    (label
                     :text emacs_session
                     :limit-width 50)
                    (separator)))
              (revealer
               :transition "slideleft"
               :reveal {mic_state == 'muted' ? false : true}
               :duration "200ms"
               (mic))
              (space)
              (clock)
              (space)
              (battery_v2)
              (revealer ;; Right Emacs status
               :transition "slideright"
               :reveal {emacs_focused == "t"}
               :duration "300ms"
               (emacs_window))))
              (layout_alert)
            (revealer
             :transition "slideright"
             :reveal {emacs_focused == "t" && emacs_buffer_modifier != ""}
             (container
              :bg "dark"
              :fg "light"
              :right "dark"
              (box (text :content emacs_buffer_modifier :class "fg-yellow"))))
            ))

(defwidget right []
           (box :orientation "h"
                :space-evenly false
                :halign "end"
                (revealer
                 :transition "slideleft"
                 :reveal {cpu_temp >= warning_cpu_temp ||  EWW_RAM.used_mem_perc >= warning_used_mem_perc ? true : false}
                 (container
                  :bg "yellow"
                  :fg "dark"
                  :left "yellow"
                  :right "yellow"
                  (box
                   :space-evenly false
                   (revealer
                    :transition "slideleft"
                    :reveal {cpu_temp >= warning_cpu_temp}
                    :duration "250ms"
                    (box
                     :space-evenly
                     (space)
                     (text :content "${cpu_temp}󰔄" :class "fg-dark bg-yellow")
                     (space)))
                   (revealer
                    :transition "slideleft"
                    :reveal {EWW_RAM.used_mem_perc >= warning_used_mem_perc}
                    :duration "250ms"
                    (box
                     :space-evenly false
                     (space)
                     (text :content " ${round(EWW_RAM.used_mem_perc, 0)}%" :class "fg-dark bg-yellow")
                     (space))))))
                (container
                 :left "dark"
                 :bg "dark"
                 :fg "light"
                 (box
                  :space-evenly false
                  (revealer
                   :transition "slideleft"
                   :reveal {timer69 == '' ? false : true}
                   :duration "500ms"
                          (text
                    :class "fg-${timer_color} px-4"
                    :content "${timer69}"))
                  (text
                   :class "fg-${timer_color} px-4"
                   :content " ")))))

(defwidget separator []
           (box (space) (space) (space) (space) (space) (space) (space) (space) (space) (space) (space) (space) (space) (space) (space) (space) (space) (space) (space) (space) (space) (space)))

(defwidget space []
           (box :class "" :vexpand "false" :hexpand "false"
                (label :class "space" :text " ")))

(defwidget container [bg fg ?size ?left ?right]
           (box
             :orientation "horizontal"
             :space-evenly false
             (revealer
              :transition "slideleft"
              :reveal {left != ""}
              )
            (box
             :class "bg-${bg} fg-${fg}"
             (children))
            (revealer
              :transition "slideright"
              :reveal {right != ""}
              )))

(defwidget icon [path ?size]
           (image
             :class "icon"
             :path path
             :image-width size
             :image-height size))

(defwidget text [content ?class]
           (label
            :class "text ${class}"
            :text content))

(defvar emacs_focused "f")

(defvar emacs_session "")

(defwidget emacs_session []
    (revealer
    :transition "fade"
    :reveal {emacs_focused == "t"}
    :duration "300ms"
    (box :orientation "h" :space-evenly false :hexpand false :halign "start"
            (label
            :class "fg-purple"
            :text {" "})
            (label
            :text emacs_session
            :limit-width 50))))

(defvar emacs_window "")
(defvar emacs_window_icon "")

(defwidget
 emacs_window []
 (box
  :class "box"
  :orientation "h"
  :space-evenly false
  :halign "end"
  :width 300 (separator)
  (box
   :hexpand true
   :space-evenly false
   :halign
   "end"
   (label :text emacs_window_icon :limit-width 2)
   (space)
   (space)
   (space)
   (label :text emacs_window :xalign 1 :limit-width 50))))

(defvar emacs_buffer_modifier "")

(defwidget emacs_buffer_modifier []
    (revealer
            :transition "slideright"
            :reveal {emacs_buffer_modifier != ""}
            (box :halign "end"
                (space)
                (label
                    :text emacs_buffer_modifier
                    :xalign 1
                    :class "fg-yellow"))))

(defvar emacs_lsp "")

(defwidget emacs_lsp []
    (box :orientation "h" :halign "end"
        (label
            :justify "end"
            :xalign 0
            :class "fg-blue"
            :limit-width 2
            :text emacs_lsp)))

(defvar git_branch "")

(defwidget git_branch []
    (revealer
        :transition "fade"
        :reveal {emacs_focused == "t" && git_branch != ""}
        :duration "300ms"
        (box :orientation "h" :space-evenly false :hexpand true :width "20px"
            (space)
            (label
            :text {"  "}
            :limit-width 3)
            (label
            :text git_branch
            :limit-width 50)
            (space))))

(defwidget battery_v2 []
           (overlay 
            :width 20
            :height 20
            (box
                :style "margin: 5px;"
                (circular-progress :value volume_percent
                                   :class "bg-dark fg-blue"
                                   :thickness 3))
            (box
                :style "padding: 2px;"
                (circular-progress :value {EWW_BATTERY.BAT0.capacity}
                                   :class "bg-dark fg-cyan ${EWW_BATTERY.BAT0.status == 'Charging' ? 'bg-cyan-07' : 'bg-dark'}"
                                   :thickness 3
                                   ))))

(defwidget battery []
           (box :class "bat_module" :vexpand "false" :hexpand "false"
                (circular-progress :value {EWW_BATTERY.BAT0.capacity}
                                   :class "circle_bar bat_bar ${EWW_BATTERY.BAT0.status == 'Charging' ? 'battery_charging' : 'battery_discharging'}"
                                   :thickness 3
                                   (button
                                     :class "iconbat"
                                     :tooltip "battery on ${EWW_BATTERY.BAT0.capacity }%"
                                     :onclick "$HOME/.config/eww/scripts/pop system"
                                     " "))))

(defvar layout_alert_reveal false)

(defwidget layout_alert []
            (revealer
             :transition "slideright"
             :reveal layout_alert_reveal
             :duration "250ms"
             (box
              :space-evenly false
              (space)
              (container
               :left "yellow"
               :right "yellow"
               :bg "yellow"
               :fg "dark"
               (text :content "ru" :class "fg-dark px-4"))
              (space))))

(defvar timer69 "")
(defvar timer_color "light")

(defwidget timer69 []
(revealer
             :transition "slideleft"
             :reveal {timer69 == '' ? false : true}
             :duration "500ms"
             (box :orientation "h" :space-evenly false :hexpand true
                  (space)
                  (label
                    :style {"color: " + timer_color}
                    :text {timer69}
                    :limit-width 35)
                  (space))))

(defpoll mic_state :interval "0.5s" :initial "" `$HOME/.config/bin/mic-state`)

(defwidget mic []
             (box :class "mic" :orientation "h" :space-evenly false :hexpand true :width "20px"
                  (space)
                  (label
		    :class "fg-red"
                    :text " "
                    :limit-width 35)
                  (space)))

(defpoll time :interval "5s" `date +'{"h": "%H", "m": "%M"}'`)

(defwidget clock []
           (eventbox :onhover "eww update time_rev=true"
                     :onhoverlost "eww update time_rev=false"
                     (box :space-evenly "false" :orientation "h" :spacing "2" :class "box"
                          (label :text {time.h} )
                          (label :text "󰇙" :class "clock_time_sep" )
                          (label :text {time.m} ))))

(deflisten playing_reveal "while true; do if [[ $(playerctl status) == 'Playing' ]]; then echo t; else echo f; fi; sleep 1; done")
(deflisten playing_title "while true; do playerctl metadata title; sleep 1; done")
(defvar playing_reveal_manual "t")

(defwidget mpv_player []
           (revealer
             :transition "slideleft"
             :reveal {playing_reveal == 't' && playing_reveal_manual == 't' ? true : false}
             :duration "500ms"
             (container
              :bg "dark"
              :fg "light"
              :right "dark"
              (box :class "bg-dark" :orientation "h" :space-evenly false :hexpand true :width "20px"
                  ; (image :path playing_art :image-height 15)
                  (space)
                  (label
                    :text {'  ' + playing_title}
                    :limit-width 70)
                  (space)))))

(defvar warning_cpu_temp 55)
(defpoll cpu_temp :interval "10s"
         :initial "0"
         `$HOME/.config/eww/scripts/temp`)

(defwidget cpu_temp_alert []
            (label
             :class "cpu_temp_alert"
             :text "${cpu_temp}󰔄 "
             :tooltip "brightness"))

(defvar warning_used_mem_perc 80)

(defwidget ram_alert []
                  (label
                    :class "cpu_temp_alert"
                    :text " ${round(EWW_RAM.used_mem_perc, 0)}%"
                    :tooltip "brightness"))

(defvar current_workspace_name "?")

(defwidget workspace []
           (box :space-evenly "false" :orientation "h" :spacing "3"
                (label :text {current_workspace_name == '10' ? '0' : current_workspace_name})
                (space)))

(defpoll volume_percent :interval "1h" `$HOME/.config/eww/scripts/volume current`)

(defwidget volume_circle []
           (box :vexpand "false" :hexpand "false"
                (circular-progress :value volume_percent
                                   :class "bg-dark fg-blue"
                                   :thickness 3)))

(defvar notification_reveal false)
(defvar notification_text "")

(defwidget notification []
           (revealer
            :transition "slideleft"
            :reveal notification_reveal
            :duration "500ms"
            (container
             :bg "cyan"
             :fg "dark"
             :left "cyan"
             :right "cyan"
             (text :content notification_text :class "fg-dark"))))

(defwidget app_launcher []
  (box :space-evenly false
    (input :value "App name")))

(defwindow powermenu
           :monitor 0
           :stacking "fg"
           :geometry (geometry :width "100%" :height "100%")
           (powermenu_layout))

(defwidget _buttons [shutdown shutdown_icon reboot
                              reboot_icon logout logout_icon]
           (box :class "btns-box" :spacing 5
                :vexpand true :hexpand true
                :valign "end" :halign "end"
                :space-evenly false
                (button :onclick shutdown shutdown_icon)
                (button :onclick reboot reboot_icon)
                (button :onclick logout logout_icon)))

(defwidget _network [strength offline excellent good okay slow]
           (box :class "net-box"
                :space-evenly false
                (label :text {strength == "" ? offline :
                       strength < 26 ? slow :
                       strength < 51 ? okay :
                       strength < 76 ? good : excellent})

                (label :text {wireguard_vpn == 'active' ? "󰖂 " : " "})))

(defwidget powermenu_layout []
           (box :class "layout-box" :space-evenly false :orientation "vertical"
                (box :valign "start" :space-evenly false :spacing 25
                     (_network :strength net :offline "󰣽 " :excellent "󰣺 " :good "󰣸 "
                               :okay "󰣶 " :slow "󰣴 ")
                     )
                (box :space-evenly false :hexpand true :vexpand true
                     (_buttons :shutdown "poweroff" :reboot "reboot"
                               :logout "loginctl kill-session self"
                               :shutdown_icon "󰐥" :reboot_icon "" :logout_icon "󰍃"))))

(defpoll net :interval "10s"
         :initial `0`
         `nmcli -t -f SIGNAL,ACTIVE device wifi | awk -F':' '{ if ($2=="yes") print $1 }'`)
(defpoll wireguard_vpn :interval "5s"
         :initial ``
         `nmcli device | rg pixelplex-vpn | awk '{print "active"}'`)
