#+title: GNU Emacs Config
#+author: Suzu
#+description: My personal Emacs config
#+STARTUP: inlineimages

* Ideas
- Open project's makefile by keybind
- Add to makefile default language specific commands
  - Rust: cargo, shuttle
  - Python: poetry
- Simulate single mode-line when multiple windows opened


* Important programs to load first
** Loading scripts
#+begin_src elisp
(setq native-comp-speed 2) ;; maximum native Elisp speed!
(native-compile-async "~/.emacs.d" 'recursively)
(custom-set-variables '(warning-suppress-types '((comp))))
(add-to-list 'load-path (expand-file-name "~/.emacs.d/scripts"))
(add-to-list 'load-path "~/dotfiles/.emacs.d/themes")
(require 'package-manager)
(require 'my-extensions)
#+end_src

** Upgrade GC
#+begin_src elisp
(use-package gcmh
  :init
  (gcmh-mode 1))
#+end_src

** Debug on error
#+begin_src elisp
(setq-default debug-on-error nil)
#+end_src

** Continue loading scripts
#+begin_src elisp
(require 'project-persp)

(require 'project-new)
(defun my/project-new-created-hook (project-path)
  (message "My project new created hook with %s" project-path)
  (project-persp-switch project-path))
(add-hook 'project-new-created-hook 'my/project-new-created-hook)

(use-package async)
(require 'ob-async-sql)
(require 'scimotions)
#+end_src

** Load evil mode
*** Install
#+begin_src elisp
(use-package undo-tree :ensure t)
#+end_src

*** User Retrun to jump Org mode links
#+begin_src elisp
(with-eval-after-load 'evil-maps
  (define-key evil-motion-state-map (kbd "SPC") nil)
  (define-key evil-motion-state-map (kbd "RET") nil))
(setq org-return-follows-link t)
#+end_src

*** Better window navigation
#+begin_src elisp
(winner-mode +1) ;; Allows to restores layout after maximizing
#+end_src

** General keybindings
#+begin_src elisp
(defun suzu/split-window-vertical ()
  (interactive)
  (split-window-right)
  (other-window 1))

(defun suzu/split-window-horizontal ()
  (interactive)
  (split-window-below)
  (other-window 1))

(defun scroll-half-down ()
  "Scroll down half a window."
  (interactive)
  (scroll-down (floor (/ (window-height) 2))))

(defun scroll-half-up ()
  "Scroll up half a window."
  (interactive)
  (scroll-up (floor (/ (window-height) 2))))

(defun my/window-with-name-visible-p (name)
  "Check if a window with the given NAME is currently visible."
  (let ((buffer (get-buffer name)))
    (when buffer
      (seq-some
       (lambda (window) (eq (window-buffer window) buffer))
       (window-list)))))

(defun my/next-error ()
  "Navigates to the next xref or flymake."
  (interactive)
  (if (seq-some
       #'my/window-with-name-visible-p
       (append
        '("*xref*" "*Occur*")
        my/global-compilation-buffer-names-list))
      (next-error)
    (flymake-goto-next-error)))

(defun my/previous-error ()
  "Navigates to the previous xref or flymake."
  (interactive)
  (if (seq-some
       #'my/window-with-name-visible-p
       (append
        '("*xref*" "*Occur*")
        my/global-compilation-buffer-names-list))
      (previous-error)
    (flymake-goto-prev-error)))

(use-package
 general
 :config

 (general-define-key
  :keymaps
  '(vterm-mode-map global-map)
  "<f2>"
  '(vterm-toggle-forward :wk "Toggle vterm forward")
  "<f3>"
  '(vterm-toggle :wk "Toggle eshell")
  "<f4>"
  '(vterm-toggle-backward :wk "Toggle vterm backward"))

 (general-define-key
  "C-+"
  '(text-scale-increase :wk "Zoom in")
  "C--"
  '(text-scale-decrease :wk "Zoom out"))

 (general-define-key
  :prefix "C-x" "3"
  '((lambda ()
      (interactive)
      (split-window-right)
      (windmove-right))
    :wk "Split window right"))

 (general-define-key :prefix "C-x" "I" '(ibuffer :wk "Show iBuffer"))


 (general-define-key
  :keymaps
  '(global-map)
  "<f5>"
  '((lambda ()
      (interactive)
      (flymake-show-buffer-diagnostics)
      (message "Buffer diagnostics")
      (other-window 1))
    :wk "Open buffer diagnostics")
  "M-]"
  '(my/next-error :wk "Go to next error")
  "M-["
  '(my/previous-error :wk "Go to prev error"))

 (general-define-key
  "<f7>"
  '(org-agenda :wk "Org Agenda")
  "<f8>"
  '(recompile :wk "Reccompile")
  "<f9>"
  '(project-compile :wk "Manual project compile"))

 (general-define-key
  "C-v"
  '(scroll-half-up :wk "Scroll up")
  "M-v"
  '(scroll-half-down :wk "Scroll down")))

(general-define-key
 :prefix "C-x" "/"
 '(comment-or-uncomment-region :wk "Toggle comment region"))

(defun my/visual-inner-WORD ()
  "Select the inner word at point."
  (interactive)
  (search-backward-regexp " \\|^")
  (forward-char)
  (set-mark (point))
  (search-forward-regexp " \\|$")
  (backward-char))

(general-define-key
 :prefix "C-c" "W" '(my/visual-inner-WORD :wk "Visual inner WORD"))

(general-define-key
 :prefix "C-;" "d" '(duplicate-line :wk "Duplicate line"))
#+end_src

#+RESULTS:

** Theme

*** Modus
#+begin_src elisp
(setq
 modus-themes-mode-line '(3d)
 modus-themes-region '(bg-only)
 modus-themes-org-blocks 'gray-background
 modus-themes-completions '((selection intense) (popup intense))
 modus-themes-bold-constructs t
 modus-themes-italic-constructs t
 modus-themes-paren-match '(bold)
 modus-themes-completions '((matches . (extrabold underline)) (selection . (semibold)))
 modus-themes-syntax '(green-strings yellow-comments)
 modus-themes-headings
 '((0 . (rainbow 1.9))
   (1 . (rainbow 1.5))
   (2 . (rainbow 1.3))
   (3 . (rainbow 1.2))
   (t . (semilight 1.1))))

(setq modus-themes-common-palette-overrides
      '((border-mode-line-active unspecified)
        (border-mode-line-inactive unspecified)))

(add-to-list 'default-frame-alist '(left-fringe . 0))
(add-to-list 'default-frame-alist '(right-fringe . 0))
(add-to-list 'default-frame-alist '(fullscreen . maximized))
(add-to-list 'default-frame-alist '(undecorated . t))
#+end_src

#+begin_src elisp
(use-package base16-theme :disabled)
(use-package
 grayscale-theme
 :after (vterm)
 :config
 (require 'grayscale-vterm)
 (require 'grayscale-ansi)
 (set-face-attribute
  'org-block nil
  :background
  (plist-get grayscale-theme-colors :bg+1))
 (custom-set-faces
  '(font-lock-doc-face ((t (:inherit italic :foreground "#868686"))))
  '(font-lock-keyword-face
    ((t (:inherit italic :foreground "#BEC3C6" :weight bold))))
  '(font-lock-string-face
    ((t (:inherit italic :foreground "#738678"))))
  `(org-table
    ((t (:inherit default :foreground ,(plist-get grayscale-theme-colors :fg)))))))
#+end_src

*** Current
#+begin_src elisp
(load-theme 'grayscale :no-confirm)

#+end_src

*** Line numbers width
#+begin_src elisp
(setq-default display-line-numbers-width 4)
#+end_src

*** Dim inactive buffers
#+begin_src elisp
(use-package auto-dim-other-buffers
  :disabled
  :custom
  (auto-dim-other-buffers-dim-on-switch-to-minibuffer nil)
  (auto-dim-other-buffers-affected-faces '((default . auto-dim-other-buffers-face)
                                           (org-hide . auto-dim-other-buffers-hide-face))))
#+end_src

*** Golden ratio
Automatically resizes windows to fit golden ratio
#+begin_src elisp
(use-package
 golden-ratio
 :init (golden-ratio-mode 1)
 :config
 (add-hook 'ediff-startup-hook '(lambda () (golden-ratio-mode -1)) t)
 :custom
 (golden-ratio-auto-scale t)
 (golden-ratio-exclude-buffer-names '("*Occur*" "*xref*")))
#+end_src

*** Zen mode
#+begin_src elisp
(use-package zen-mode
  :disabled)
#+end_src

** Auth source
#+begin_src elisp
(use-package auth-source
  :config
  (auth-source-pass-enable)
  (setq auth-source-debug 'trivia))
#+end_src

** Git
*** Magit
#+begin_src elisp
(use-package magit
  :config
  (setq magit-status-buffer-switch-function 'switch-to-buffer)
  (setq magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1)
  :general
  (general-define-key
   :keymaps '(override prog-mode)
   :prefix "C-x g"
   "o" '(magit :wk "Magit")
   "c" '(magit-commit :wk "Commit")))
#+end_src

*** Gutter
#+begin_src elisp
(use-package
 git-gutter
 :custom
 (git-gutter:modified-sign "~")
 (git-gutter:added-sign "+")
 (git-gutter:deleted-sign "-")
 :config
 (set-face-foreground
  'git-gutter:modified (plist-get grayscale-theme-colors :yellow))
 (set-face-foreground
  'git-gutter:added (plist-get grayscale-theme-colors :green))
 (set-face-foreground
  'git-gutter:deleted (plist-get grayscale-theme-colors :red))
 (defun my/stage-hunk ()
   "Wrapper around git-gutter:stage-hunk but without confirm requirement"
   (interactive)
   (git-gutter:awhen
    (git-gutter:search-here-diffinfo git-gutter:diffinfos)
    (git-gutter:do-stage-hunk it)
    (git-gutter:update-all-windows)
    (message "✅ staged" (buffer-name))))
 :general
 (general-define-key
  :keymaps '(override prog-mode)
  :prefix
  "C-x g"
  "n"
  '(git-gutter:next-hunk :wk "Next git hunk")
  "p"
  '(git-gutter:previous-hunk :wk "Previous git hunk")
  "s"
  '(my/stage-hunk :wk "Stage hunk"))
 :hook
 (prog-mode . git-gutter-mode)
 (org-mode . git-gutter-mode)
 (magit-post-refresh-hook git-gutter:update-all-windows))
#+end_src

*** Merging
#+begin_src elisp
(use-package smerge-mode
  :ensure nil
  :hook
  (prog-mode . smerge-mode))
#+end_src

** Modeline
#+begin_src elisp
(use-package
 nano-modeline
 :config
 (setq-default mode-line-format nil)
 (add-hook 'prog-mode-hook #'nano-modeline-prog-mode)
 (add-hook 'text-mode-hook #'nano-modeline-text-mode)
 (add-hook 'org-mode-hook #'nano-modeline-org-mode)
 (add-hook 'pdf-view-mode-hook #'nano-modeline-pdf-mode)
 (add-hook 'elfeed-show-mode-hook #'nano-modeline-elfeed-entry-mode)
 (add-hook
  'elfeed-search-mode-hook #'nano-modeline-elfeed-search-mode)
 (add-hook 'term-mode-hook #'nano-modeline-term-mode)
 (add-hook 'xwidget-webkit-mode-hook #'nano-modeline-xwidget-mode)
 (add-hook 'messages-buffer-mode-hook #'nano-modeline-message-mode)
 (add-hook 'org-capture-mode-hook #'nano-modeline-org-capture-mode)
 (add-hook 'org-agenda-mode-hook #'nano-modeline-org-agenda-mode))
#+end_src

** All the icons
#+begin_src elisp
(use-package all-the-icons
  :ensure t)
(use-package all-the-icons-dired
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

** No backups (or `~` files)
#+begin_src elisp
(setq make-backup-files nil)
#+end_src

** Corfu
#+begin_src elisp
 (use-package
  corfu
  :custom
  (corfu-cycle t) ;; Enable cycling for `corfu-next/previous'
  (corfu-auto nil) ;; Enable auto completion
  (corfu-popupinfo-mode t)
  (corfu-echo-documentation 0)
  :bind
  (:map
   corfu-map
   ("M-SPC" . corfu-insert-separator)
   ("RET" . nil)
   ("TAB" . corfu-next)
   ([tab] . corfu-next)
   ("S-TAB" . corfu-previous)
   ([backtab] . corfu-previous)
   ("C-<return>" . corfu-insert))
  :init
  (global-corfu-mode)
  (corfu-popupinfo-mode))

(defun corfu-enable-always-in-minibuffer ()
  "Enable Corfu in the minibuffer if Vertico/Mct are not active."
  (unless (or (bound-and-true-p mct--active)
              (bound-and-true-p vertico--input)
              (eq (current-local-map) read-passwd-map))
    (setq-local corfu-auto nil) ;; Enable/disable auto completion
    (setq-local corfu-echo-delay nil ;; Disable automatic echo and popup
                corfu-popupinfo-delay nil)
    (corfu-mode 1)))
(add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1)

(use-package emacs
  :init
  (setq completion-cycle-threshold 3))
#+end_src

*** Dabbrev
#+begin_src elisp
(use-package
 dabbrev
 ;; Swap M-/ and C-M-/
 :bind (("M-/" . dabbrev-expand) ("C-M-/" . dabbrev-completion))
 :config (add-to-list 'dabbrev-ignored-buffer-regexps "\\` ")
 ;; Since 29.1, use `dabbrev-ignored-buffer-regexps' on older.
 (add-to-list 'dabbrev-ignored-buffer-modes 'doc-view-mode)
 (add-to-list 'dabbrev-ignored-buffer-modes 'pdf-view-mode)
 (defun my/dabbrev-select-buffer (other-buffer)
   (message "Checking %s for completion" other-buffer)
   (get-buffer-window other-buffer))
 (setq dabbrev-friend-buffer-function #'my/dabbrev-select-buffer))
#+end_src

*** Orderless
#+begin_src elisp
(use-package orderless
  :init
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+end_src

*** Icons
#+begin_src elisp
(use-package nerd-icons-corfu
:config
(add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))
#+end_src

** Dired
*** Base
#+begin_src elisp
(use-package dired-open
  :custom ((dired-listing-switches "-agho --group-directories-first"))
  :config
  ;; (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
  ;;  (EVIL-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file)
  (setq dired-open-extensions '(("gif" . "feh")
                                ("jpg" . "feh")
                                ("jpeg" . "feh")
                                ("png" . "feh")
                                ("mkv" . "mpv")
                                ("mp4" . "mpv"))))

(use-package peep-dired
  :after dired
  :hook (evil-normalize-keymaps . peep-dired-hook))

(setf dired-kill-when-opening-new-dired-buffer t)
(setq-default dired-listing-switches "-aBhl  --group-directories-first")
#+end_src

** Elfeed
#+begin_src elisp
(use-package elfeed
  :config
  (setq elfeed-search-feed-face ":foreground #ffffff :weight bold"
        elfeed-feeds (quote
                      (
                       ("https://www.reddit.com/r/emacsporn.rss" reddit emacs)
                       ("https://www.reddit.com/r/manga.rss" reddit manga)
                       ("https://www.reddit.com/r/manga.rss" reddit manga)
                       ("https://hackaday.com/blog/feed/" hackaday linux)
                       ("https://opensource.com/feed" opensource linux)
                       ("https://linux.softpedia.com/backend.xml" softpedia linux)
                       ("https://itsfoss.com/feed/" itsfoss linux)
                       ("https://www.zdnet.com/topic/linux/rss.xml" zdnet linux)
                       ("https://www.computerworld.com/index.rss" computerworld linux)
                       ("https://www.networkworld.com/category/linux/index.rss" networkworld linux)
                       ("https://www.techrepublic.com/rssfeeds/topic/open-source/" techrepublic linux)
                       ("https://betanews.com/feed" betanews linux)
                       ("https://systemcrafters.net/rss/news.xml" emacs)
                       ("https://hnrss.org/frontpage" hackernews)
                       ("http://feeds.feedburner.com/blogspot/vEnU" music jazz)))))


(use-package elfeed-goodies
  :init
  (elfeed-goodies/setup)
  :config
  (setq elfeed-goodies/entry-pane-size 0.5))

(add-hook 'elfeed-show-mode-hook 'visual-line-mode)
#+end_src

** Fonts
#+begin_src elisp
(set-face-attribute 'default nil
                    :font "Iosevka NF"
                    :height 130
                    :weight 'medium)
(set-face-attribute 'variable-pitch nil
                    :font "Iosevka NF"
                    :height 130                    
                    :weight 'medium)
(set-face-attribute 'fixed-pitch nil
                    :font "Iosevka NF"
                    :height 1.0
                    :weight 'medium)
(set-face-attribute 'font-lock-comment-face nil :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil :slant 'italic)

(add-to-list 'default-frame-alist '(font . "Iosevka NF 13"))

(setq-default line-spacing 0)
#+end_src

** Ediff
#+begin_src elisp
(setq ediff-split-window-function 'split-window-horizontally
      ediff-window-setup-function 'ediff-setup-windows-plain)

(defun suzu/ediff-hook ()
(ediff-setup-keymap)
(define-key ediff-mode-map "j" 'ediff-next-difference)
(define-key ediff-mode-map "k" 'ediff-previous-difference)
(golden-ratio-mode nil))

(add-hook 'ediff-mode-hook 'suzu/ediff-hook nil t)
#+end_src

* Dashboard
#+begin_src elisp
(defun suzu/dashboard-insert-banner ()
  "Insert the banner at the top of the dashboard."
  (goto-char (point-max))
  (when-let ((banner
              (dashboard-choose-banner dashboard-startup-banner)))
    (let ((start (point))
          buffer-read-only
          text-width
          image-spec
          (graphic-mode (display-graphic-p)))
      (when graphic-mode
        (insert "\n"))
      ;; If specified, insert a text banner.
      (when-let ((txt (plist-get banner :text)))
        (if (file-exists-p txt)
            (insert-file-contents txt)
          (save-excursion (insert txt)))
        (unless (text-properties-at 0 txt)
          (put-text-property
           (point) (point-max) 'face 'dashboard-text-banner))
        (setq text-width 0)
        (while (not (eobp))
          (let ((line-length
                 (- (line-end-position) (line-beginning-position))))
            (when (< text-width line-length)
              (setq text-width line-length)))
          (forward-line 1)))
      ;; If specified, insert an image banner. When displayed in a graphical frame, this will
      ;; replace the text banner.
      (when-let ((img (plist-get banner :image)))
        (let ((img-props
               (append
                (when (> dashboard-image-banner-max-width 0)
                  (list :max-width dashboard-image-banner-max-width))
                (when (> dashboard-image-banner-max-height 0)
                  (list
                   :max-height dashboard-image-banner-max-height))
                dashboard-image-extra-props)))
          (setq image-spec
                (cond
                 ((dashboard--image-animated-p img)
                  (create-image img))
                 ((dashboard--type-is-xbm-p img)
                  (create-image img))
                 ((image-type-available-p 'imagemagick)
                  (apply 'create-image
                         img
                         'imagemagick
                         nil
                         img-props))
                 (t
                  (apply 'create-image
                         img nil nil
                         (when (and (fboundp 'image-transforms-p)
                                    (memq
                                     'scale
                                     (funcall 'image-transforms-p)))
                           img-props))))))
        (add-text-properties start (point) `(display ,image-spec))
        (when (ignore-errors
                (image-multi-frame-p image-spec))
          (image-animate image-spec 0 t)))

      ;; Finally, center the banner (if any).
      (when-let*
          ((text-align-spec
            `(space . (:align-to (- center ,(/ text-width 2)))))
           (image-align-spec
            `(space . (:align-to (- center (0.5 . ,image-spec)))))
           (prop
            (cond
             ;; Both an image & text banner.
             ((and image-spec text-width)
              ;; The quoting is intentional. This is a conditional display spec that will
              ;; align the banner at redisplay time.
              `((when (display-graphic-p)
                  .
                  ,image-align-spec)
                (when (not (display-graphic-p))
                  .
                  ,text-align-spec)))
             ;; One or the other.
             (text-width
              text-align-spec)
             (image-spec
              image-align-spec)
             ;; No banner.
             (t
              nil)))
           (prefix (propertize " " 'display prop)))
        (add-text-properties
         start (point)
         `(line-prefix ,prefix wrap-prefix ,prefix)))
      (insert "\n")
      (add-text-properties
       start (point)
       '(cursor-intangible t inhibit-isearch t)))))

(use-package
 dashboard
 :ensure t
 :custom
 (dashboard-set-init-info t)
 (dashboard-set-navigator t)
 (dashboard-show-shortcuts t)
 (dashboard-center-content t)
 (dashboard-startup-banner
 (expand-file-name "~/.emacs.d/banners/anime/1.png"))
 (dashboard-set-heading-icons t)
 (dashboard-set-file-icons nil)
 (dashboard-startupify-list
  '(suzu/dashboard-insert-banner
    dashboard-insert-newline
    dashboard-insert-footer
    dashboard-insert-newline
    dashboard-insert-init-info
    dashboard-insert-newline
    end-of-buffer))
 :config (dashboard-setup-startup-hook))

(add-hook 'dashboard-after-initialize-hook 'end-of-buffer)
(setq-default initial-buffer-choice
              (lambda () (get-buffer "*dashboard*")))
#+end_src

** Banners
#+begin_src
⡆⣿⣿⣦⠹⣳⣳⣕⢅⠈⢗⢕⢕⢕⢕⢕⢈⢆⠟⠋⠉⠁⠉⠉⠁⠈⠼⢐⢕
⡝⡄⢻⢟⣿⣿⣷⣕⣕⣅⣿⣔⣕⣵⣵⣿⣿⢠⣿⢠⣮⡈⣌⠨⠅⠹⣷⡀⢱
⡝⠁⣠⣾⠟⡉⡉⡉⠻⣦⣻⣿⣿⣿⣿⣿⣿⣿⣿⣧⠸⣿⣦⣥⣿⡇⡿⣰⢗
⡀⢻⣿⡇⢙⠁⠴⢿⡟⣡⡆⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣵⣵
⣷⢄⠻⣿⣟⠿⠦⠍⠉⣡⣾⣿⣿⣿⣿⣿⣿⢸⣿⣦⠙⣿⣿⣿⣿⣿⣿⣿⣿

⡗⢰⣶⣶⣦⣝⢝⢕⢕⠅⡆⢕⢕⢕⢕⢕⣴⠏⣠⡶⠛⡉⡉⡛⢶⣦⡀⠐⣕
⡝⡵⠟⠈⢀⣀⣀⡀⠉⢿⣿⣿⣿⣿⣿⣿⣿⣼⣿⢈⡋⠴⢿⡟⣡⡇⣿⡇⡀
⠁⢰⣿⡏⣴⣌⠈⣌⠡⠈⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣬⣉⣉⣁⣄⢖⢕⢕
⡻⣄⣻⣿⣌⠘⢿⣷⣥⣿⠇⣿⣿⣿⣿⣿⣿⠛⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿ 
⡕⡑⣑⣈⣻⢗⢟⢞⢝⣻⣿⣿⣿⣿⣿⣿⣿⠸⣿⠿⠃⣿⣿⣿⣿⣿⣿⡿⠁#+end_src

⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⡒⣢⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡤⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⠃⠀⠀⠀⠉⣁⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⡀⠀⠀⠈⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⣶⣟⣛⠛⠋⠉⠉⠉⠉⠉⠉⠉⠉⠉⠙⢛⣛⣷⡦⢀⣤⣶⡶⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⢀⡀⠀⠀⠀⠀⠀⣴⣶⣶⠂⠤⢄⣀⠀⠀⠀⠈⠉⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠋⠉⣰⣿⣿⣿⣇⢹⡄⠀⠀⠀⣀⠀⣠⠤⠠⡄⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⣀⡯⠹⢲⡄⠀⠀⠀⣿⣿⣿⣷⣤⡀⠈⣹⣶⠦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⠀⢷⠀⠀⢰⡇⠋⠀⠀⢠⠇⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠛⠒⣎⡏⠀⠀⠀⠀⣿⣿⣿⡏⠙⠛⢦⡙⠉⠀⠀⠉⠓⢦⣀⠀⠀⢀⣀⣀⣀⣀⣀⡀⠀⢠⣿⣿⣿⠟⠻⣿⣿⡇⢸⡇⠀⠀⠓⠒⣦⠀⠛⢦⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⠿⠓⠂⠀⡠⠽⢦⡀⠀⠀⠀⠈⠛⢛⡉⢉⠉⠀⠀⠙⠛⠋⢛⣿⢯⡉⠛⠀⠀⠘⠈⢿⠗⢻⠀⠀⠀⠀⠛⠦⠶⠋⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣇⠀⠀⢠⠋⠀⢀⡾⢛⡆⠀⠀⠀⢉⡽⠛⠁⠈⣏⢦⠐⢶⣤⡹⣿⠒⠁⠀⠀⢀⡠⠤⢼⢣⢸⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⡴⠲⢤⡀⣀⣀⠀⠀⢸⣿⡗⠀⡇⠀⣠⣾⠟⠛⠡⣾⡴⢶⡯⠀⠤⠀⠀⢸⠸⡇⠀⡙⣿⣌⠻⣤⣀⡠⠋⠀⠀⢸⡏⢠⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⡇⠀⠀⠉⠁⣸⠀⠀⠀⢿⣿⠤⣫⡾⣿⣿⢱⣀⡼⠛⢒⡿⠀⠀⠀⠀⠀⠸⡇⢳⠐⠛⠉⠻⣇⢹⢿⣟⣦⣀⣸⣍⣷⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⢀⡴⠄⠀⢰⠚⠁⠀⠀⠀⠘⢿⣿⡿⣤⠉⠁⣠⡿⠁⠀⣼⠁⠀⠀⣀⣀⡤⠂⡇⢸⡀⠀⠀⠀⠹⡆⠀⠀⠀⢿⣿⣤⣿⣿⣿⡇⠀⠀⠀⢀⢤⡀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠸⣄⣀⣀⡼⠀⠀⠀⠀⠀⠀⣼⣿⡶⠟⠀⣴⣿⠶⢦⢰⡟⡆⠀⣀⣩⣀⠀⢰⡇⣸⡓⠄⢀⣀⡀⢿⡀⡴⠛⢶⠘⣿⣿⣿⣿⣿⡀⠀⠘⢧⣀⡕⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣼⣿⠃⠀⠀⢠⣿⠷⣤⡾⣼⡇⠁⢸⣏⠁⢘⡷⢘⡗⣿⣧⠆⣿⣈⡿⢺⣇⠉⢳⠟⠀⢸⣿⣿⣿⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣽⡓⠀⠠⣼⢺⡅⠀⠂⣿⡩⡧⠀⠀⠛⠶⡛⠉⠁⣿⡏⠻⣬⠄⠨⠀⠀⢻⠀⠐⡄⠂⠀⣿⣿⣿⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⣿⡿⡄⠀⢸⣿⣿⠁⣀⣿⣟⣀⣇⠆⢠⣀⣤⣄⠀⠀⢿⣿⣶⣻⣮⡀⠀⠀⣼⠀⠀⡏⠁⠀⢸⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⣿⡿⣿⢿⠀⠀⣿⣿⣿⠀⣿⠟⠉⠀⢹⡄⢸⣿⣿⣿⣿⣦⣸⡟⠀⠈⢻⣷⣆⡐⣿⡂⠀⡇⠀⠀⠘⣿⣿⣿⣿⣿⠀⠀⠀⠀⢀⡶⡄⠀⠀
⢀⣦⡀⠀⠀⠀⠠⠴⠾⠛⠋⠉⠀⣿⠀⠀⠀⣿⠁⣿⣿⠉⠀⠀⠀⠈⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠙⢿⣿⣿⠀⠀⣅⠁⠀⠀⣿⣿⣿⣿⣿⠀⠀⠀⠸⡍⣰⣧⠀⠀
⠈⣇⠙⢦⡀⠀⠀⠀⠀⠀⠀⠀⢰⣿⠀⠀⠀⣿⠄⣿⠃⠀⠀⠀⠀⠀⢹⣿⣿⣿⠟⠛⠿⠛⢇⠀⠀⠀⠀⠀⠻⣿⠀⢸⣇⠀⠀⣼⣿⣿⣿⣿⣿⠀⠀⠀⠐⠷⠃⠉⠀⠀
⠀⢹⡀⠀⠙⢄⠀⠀⠀⠀⠀⠀⣾⣿⠀⠀⠀⣿⣆⣿⣠⣴⣶⣶⣤⣅⡒⢻⡀⠉⠳⣾⣷⣦⣸⣭⣴⡶⢶⣤⣤⣾⠀⣸⠧⠀⣸⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀
⠀⢻⡷⠀⠀⠈⠳⣄⠀⠀⠀⣸⣿⣿⣀⠄⠀⣿⣷⣿⠛⣋⣉⣀⡀⠉⠉⠀⠀⠀⠀⠀⠉⠈⠉⣉⣈⡉⠉⠛⠿⡿⠆⣿⠂⢰⣿⣿⣿⣿⣿⣿⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀
⠀⣤⣳⡕⠄⠀⣦⠘⣦⠀⢠⣿⣿⣿⣿⣆⠀⠘⣿⣿⣜⠿⢳⠻⠁⠀⠀⢠⣠⢄⣀⣠⡄⠀⢚⢏⢎⣿⡿⡴⣸⣧⣾⣏⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀⠀
⠀⢻⡌⡛⠀⢀⣘⣿⣿⣄⣾⣿⣿⣿⣿⣿⣷⣤⣽⠟⠉⠉⠙⠒⢤⡀⠀⠘⢆⠀⠀⢠⠃⠀⠈⢈⡤⠞⠋⠉⠉⠛⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣼⣆⠀⠀⠀⠀⠀⠀
⠀⠀⠻⣮⣀⣺⣿⣿⣿⣟⣿⣿⣿⣿⣿⡻⢿⡿⠏⠀⠀⠀⠀⠀⠀⠙⢦⠀⠈⠑⠒⠋⠀⢀⡴⠋⠀⠀⠀⠀⠀⠀⢀⠈⠻⣿⣿⣿⣿⣿⣿⢿⣿⣿⣿⣿⣧⠀⠀⠀⠀⠀
⠀⠀⢺⣿⣿⣿⣿⣿⣿⣿⣵⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⢸⣷⣶⣦⣤⣶⣶⠊⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡆⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡄⠀⠀⠀
⠀⠀⠀⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣍⣉⣽⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⡀⠀
⠀⠀⠀⠘⣿⣿⣿⣿⣿⢟⣱⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠸⣿⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣖
⠀⠀⠀⢀⣽⣿⣿⡿⣉⣸⣿⣿⣿⣿⣿⣿⣏⠻⠧⠀⠀⠀⠀⠀⠀⠀⠀⣹⣿⣿⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷
⠀⠀⣴⣿⣿⣿⣿⣿⠛⣽⣿⣿⣿⣿⣿⣿⠻⣷⣤⣀⠀⠀⠀⠀⠀⠀⢠⣿⣿⠿⣦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣿⣿⣿⣿⣿⣿⣿
⠀⠸⠿⠿⠿⠻⡿⠿⠴⠿⠿⠿⠿⢿⣿⣿⣷⣆⡉⠛⠿⢷⣶⣶⣶⣶⣿⣿⣿⣄⡊⠛⠿⢷⣶⣲⣶⣶⣶⣶⣶⣶⣿⣿⣿⣿⣿⣿⣿⡿⠿⠿⠿⠿⡷⠹⠿⠿⠿⠿⠿⡞
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠒⠽⠷⠶⠶⠴⠾⠿⠟⠛⠿⠟⠛⠛⠻⠲⠦⠤⠤⠤⠤⠤⠤⠶⠿⠛⠿⠟⠓⠊⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀

⡏⠉⠛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣿
⣿⠀⠀⠀⠈⠛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠛⠉⠁⠀⣿
⣿⣧⡀⠀⠀⠀⠀⠙⠿⠿⠿⠻⠿⠿⠟⠿⠛⠉⠀⠀⠀⠀⠀⣸⣿
⣿⣿⣷⣄⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⣿
⣿⣿⣿⣿⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⣴⣿⣿⣿⣿
⣿⣿⣿⡟⠀⠀⢰⣹⡆⠀⠀⠀⠀⠀⠀⣭⣷⠀⠀⠀⠸⣿⣿⣿⣿
⣿⣿⣿⠃⠀⠀⠈⠉⠀⠀⠤⠄⠀⠀⠀⠉⠁⠀⠀⠀⠀⢿⣿⣿⣿
⣿⣿⣿⢾⣿⣷⠀⠀⠀⠀⡠⠤⢄⠀⠀⠀⠠⣿⣿⣷⠀⢸⣿⣿⣿
⣿⣿⣿⡀⠉⠀⠀⠀⠀⠀⢄⠀⢀⠀⠀⠀⠀⠉⠉⠁⠀⠀⣿⣿⣿
⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿
⣿⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿

⠤⠤⠤⠤⠤⠤⢤⣄⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠙⠒⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠤⠤⠶⠶⠶⠦⠤⠤⠤⠤⠤⢤⣤⣀⣀⣀⣀⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⢀⠄⢂⣠⣭⣭⣕⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠤⠀⠀⠀⠤⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠉⠉⠉⠉⠉⠉⠉
⠀⠀⢀⠜⣳⣾⡿⠛⣿⣿⣿⣦⡠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⣤⣤⣤⣤⣤⣤⣤⣤⣤⣍⣀⣦⠦⠄⣀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠠⣄⣽⣿⠋⠀⡰⢿⣿⣿⣿⣿⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⡿⠛⠛⡿⠿⣿⣿⣿⣿⣿⣿⣷⣶⣿⣁⣂⣤⡄⠀⠀⠀⠀⠀⠀
⢳⣶⣼⣿⠃⠀⢀⠧⠤⢜⣿⣿⣿⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣾⠟⠁⠀⠀⠀⡇⠀⣀⡈⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⡀⠁⠐⠀⣀⠀⠀
⠀⠙⠻⣿⠀⠀⠀⠀⠀⠀⢹⣿⣿⡝⢿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⡿⠋⠀⠀⠀⠀⠠⠃⠁⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣿⡿⠋⠀⠀
⠀⠀⠀⠙⡄⠀⠀⠀⠀⠀⢸⣿⣿⡃⢼⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⡏⠉⠉⠻⣿⡿⠋⠀⠀⠀⠀
⠀⠀⠀⠀⢰⠀⠀⠰⡒⠊⠻⠿⠋⠐⡼⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⠀⠀⠀⠀⣿⠇⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠸⣇⡀⠀⠑⢄⠀⠀⠀⡠⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢖⠠⠤⠤⠔⠙⠻⠿⠋⠱⡑⢄⠀⢠⠟⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠈⠉⠒⠒⠻⠶⠛⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⡄⠀⠀⠀⠀⠀⠀⠀⠀⠡⢀⡵⠃⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠦⣀⠀⠀⠀⠀⠀⢀⣤⡟⠉⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠉⠉⠉⠙⠛⠓⠒⠲⠿⢍⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀

⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⠟⠻⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⠀⠀⠈⠻⣦⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣴⣶⣦⡀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡿⡇⠀⠀⠀⠀⠈⠙⢷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⠾⠋⠁⢸⣿⡇⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣇⡇⠀⠀⠀⠀⠀⠀⠀⠙⢷⣆⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⡾⠛⠁⠀⠀⠀⣿⣼⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⡏⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⡾⠛⠁⠀⠀⠀⠀⠀⣸⡿⣿⠂⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣇⣿⠀⠀⠀⠀⠀⠶⠶⠶⠶⠶⠶⠿⠷⠶⠶⠤⣤⣤⣀⣀⡀⢀⣤⡾⠛⠁⠀⠀⠀⠀⠀⠀⠀⢠⣿⢣⡟⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⣽⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⡷⣸⠇⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⢣⡿⠁⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣼⠃⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⠇⠀⣀⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⡏⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣿⣿⡾⠛⠉⣉⣽⣿⣶⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⠶⠛⢛⣿⣿⣷⣶⣤⣀⠀⠀⠀⠀⠀⠀⢸⣿⡀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⢰⣾⠛⢉⣵⡟⣃⣤⣶⣿⣿⣿⣿⣿⣿⣷⡄⠀⠀⠀⠀⠀⣠⣾⠏⣡⣴⣾⣿⣿⣿⣿⣿⣿⣿⣷⡄⠀⠀⠀⠀⢈⡹⣇⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠙⣷⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣀⣀⣀⣀⣰⣿⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⠶⠖⠲⠾⣿⣿⣦⠀⠀⠀⠀⠀
⠀⠀⠀⠀⣠⣴⡾⠋⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠛⠻⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠀⠀⠀⠀⠀⠈⠙⢿⣄⠀⠀⠀⠀
⠀⠀⣿⡛⠉⠁⠀⠀⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⠀⠀⠀⠀⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢷⣄⠀⠀
⠀⠀⣾⣷⣦⣀⠀⠀⠈⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠏⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣧⠀
⠀⡀⠈⠻⢿⣿⣿⣷⠆⠀⠙⠻⠿⣿⣿⡿⢿⣿⠋⠀⠀⠀⣴⠇⠀⠀⠀⠈⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⡆
⠀⠻⣟⠛⠛⠛⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠿⣿⣆⣀⣠⣼⢿⣧⠀⠀⠀⢀⣿⠿⢿⣿⣿⣿⣿⣿⣿⣿⠿⣛⠹⣮⣿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣷
⠀⠀⠈⠻⢦⣤⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⢩⠿⠻⣯⢻⣷⣶⣿⡿⠋⠀⠀⠀⠉⠉⠉⠉⠁⠀⣐⣭⣾⡿⠋⢻⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿
⠀⠀⠀⢀⣰⣿⣻⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴⡿⠛⣍⠡⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡟
⠀⠀⠀⠛⣿⣿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣤⡾⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡿⠁
⠀⠀⠀⢐⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⠟⠀⠀
⠀⠀⠀⣼⣿⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡾⠃⠀⠀⠀
⠀⠀⠀⣸⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣶⡟⠀⠀⠀⠀⠀
⠀⠀⣰⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⠛⠀⠀⠀⠀⠀⠀
⢠⣾⢿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⡏⠀⠀⠀⠀⠀⠀⠀
⠀⣰⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣶⣿⠀⠀⠀⠀⠀⠀⠀⠀
⣾⢿⣾⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠛⠀⠀⠀⠀⠀⠀⠀⠀
⢀⣾⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⠀⠀⠀⠀⠀⠀⠀⠀⠀






* Dev
** Common
#+begin_src elisp
(use-package eldoc-box
  :config
  (defun suzu/eldoc-box-scroll-up ()
    "Scroll up in `eldoc-box--frame'"
    (interactive)
    (with-current-buffer eldoc-box--buffer
      (with-selected-frame eldoc-box--frame
        (scroll-down 3))))
  (defun suzu/eldoc-box-scroll-down ()
    "Scroll down in `eldoc-box--frame'"
    (interactive)
    (with-current-buffer eldoc-box--buffer
      (with-selected-frame eldoc-box--frame
        (scroll-up 3))))
  (setq max-mini-window-height 0)
  (setq eldoc-idle-delay 0)
  (general-define-key
   :keymap 'prog-mode-map
   :prefix "C-h"
   "." '(eldoc-box-help-at-point :wk "Show doc")))
#+end_src

** Languages

*** Rust
#+begin_src elisp
(defun suzu/rust-mode()
  (add-hook 'before-save-hook 'rust-format-buffer nil t))

(use-package rust-mode
  :config
  (add-hook 'rust-ts-mode-hook 'suzu/rust-mode))

(use-package cargo
  :config
  (add-hook 'rust-ts-mode-hook 'cargo-minor-mode))

(use-package rust-docs
  :vc (:url "https://github.com/scipunch/rust-docs"))
#+end_src

*** Python
#+begin_src elisp
(defun suzu/python-mode()
  (ruff-format-on-save-mode)
  (eglot-ensure))
  
(use-package python
  :ensure t)

(use-package ruff-format
  :config
  (setq ruff-format-command "ruff check --fix --select I"))

(use-package poetry
  :ensure t
  :custom
  (poetry-tracking-strategy 'project)
  :config
  (poetry-tracking-mode +1))

(add-hook 'python-ts-mode-hook 'suzu/python-mode)
#+end_src

*** Yuck
#+begin_src elisp
(use-package yuck-mode
  :ensure t)
#+end_src

*** SQL
#+begin_src elisp
(use-package sqlformat
:config
(setq sqlformat-command 'pgformatter)
(setq sqlformat-args '("-s2" "-g"))
:hook
(sql-mode-hook . sqlformat-on-save-mode))
#+end_src

*** Markdown
Required for better LSP docs rendering
#+begin_src elisp
(use-package markdown-mode
  :ensure t)
#+end_src

Generate table of contents
#+begin_src elisp
(use-package markdown-toc
  :ensure t)
#+end_src

*** CSV
#+begin_src elisp
(use-package csv-mode
  :ensure t)
#+end_src

*** Javascript
#+begin_src elisp
(setq-default js-indent-level 2)

(use-package jtsx :ensure t)

(add-to-list 'auto-mode-alist '("\\.jsx\\'" . jtsx-jsx-mode))
(add-to-list 'auto-mode-alist '("\\.tsx\\'" . jtsx-tsx-mode))


(use-package typescript-mode :ensure t)


(defun my/prettier ()
  "Formats given file with prettier."
  (interactive)
  (let ((temp-file (make-temp-file "prettier-" nil ".html"))
        (content (buffer-string)))
    (with-temp-file temp-file
      (insert content))
    (save-excursion
      (shell-command-on-region
       (point-min) (point-max)
       (format
        "prettier %s"
        temp-file)
       (current-buffer) t "*Prettier Error*" t))
    (delete-file temp-file)))

(defun my/web-mode-hook ()
  "Hooks for Web mode."
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-enable-auto-pairing t)
  (add-hook 'before-save-hook 'my/prettier nil t))

(use-package
 web-mode
 :mode (("\\.html?\\'" . web-mode))
 :hook (web-mode-hook . my/web-mode-hook))

(use-package prettier-js :ensure t)

(add-hook 'js-ts-mode-hook 'prettier-js-mode)
#+end_src

*** Emacs Lisp

#+begin_src elisp
(defun my/emacs-lisp-mode-hook ()
  (flymake-mode)
  (general-define-key
   :keymaps '(local)
   :prefix
   "C-c"
   "C-f"
   '(elisp-autofmt-buffer :wk "Format buffer")))

(use-package
 elisp-autofmt
 :hook (emacs-lisp-mode-hook . my/emacs-lisp-mode-hook))

(setq elisp-flymake-byte-compile-load-path load-path)
#+end_src

*** Tex 
#+begin_src elisp
(use-package tex-mode)
#+end_src

*** CSS
#+begin_src elisp
(use-package css-mode)
#+end_src

*** Go
#+begin_src elisp
(use-package go-mode)
#+end_src

*** Docker
#+begin_src elisp
(use-package dockerfile-mode)
#+end_src

*** ELF
#+begin_src elisp
(use-package elf-mode)
#+end_src

*** Plant UML

#+begin_src elisp
(use-package
 plantuml-mode
 :custom
 (org-plantuml-jar-path "/usr/share/java/plantuml/plantuml.jar")
 (plantuml-default-exec-mode 'jar)
 (plantuml-jar-path org-plantuml-jar-path)
 (plantuml-indent-level 2)
 (plantuml-output-type "png")
 :hook
 (plantuml-mode-hook . display-line-numbers-mode))
#+end_src

*** Yaml
#+begin_src elisp
(use-package yaml-mode
  :config
  (add-hook 'yaml-mode-hook 'display-line-numbers-mode))
#+end_src

*** PHP
#+begin_src elisp
(use-package php-mode)
#+end_src

*** Nu
#+begin_src elisp
(use-package nushell-ts-mode
  :ensure t)
#+end_src

*** JSON
#+begin_src elisp
(use-package json-mode)
#+end_src

** LSP client
Inscrease amount of data which emacs reads from the process
#+begin_src elisp
(setq read-process-output-max (* 1024 1024))
#+end_src

Setup lsp client
#+begin_src elisp
(use-package eglot
  :general
  (general-define-key
   :keymaps '(eglot-mode-map)
   :prefix "C-c"
   "C-a" '(eglot-code-actions :wk "Code actions")
   "C-e" '(eglot-rename :wk "Rename")
   "C-f" '(eglot-format :wk "Format"))
  :config
  ;; (add-to-list 'eglot-server-programs '(python-ts-mode . ("pyright-langserver" "--stdio")))
  ;; (add-to-list 'eglot-server-programs '(js-ts-mode . ("typescript-language-server" "--stdio")))
  ;; (add-to-list 'eglot-server-programs '(jtsx-jsx-mode . ("typescript-language-server" "--stdio")))
  ;; (add-to-list 'eglot-server-programs '(rust-ts-mode . ("rust-analyzer")))
  )
#+end_src

** DAP mode
#+begin_src elisp
(use-package dap-mode
  :disabled
  :ensure t)
#+end_src

** Working with ~.env~ files
Find ~.env~ file
#+begin_src elisp
(defvar suzu/dotenv-file-name ".env"
  "The name of the .env file.")

(defun suzu/find-env-file ()
  "Find the closest .env file in the directory hierarchy."

  (let* ((env-file-directory (locate-dominating-file "." suzu/dotenv-file-name))
         (file-name (concat env-file-directory suzu/dotenv-file-name)))
    (when (file-exists-p file-name)
      file-name)))
#+end_src

Declare function for loading ~.env~
#+begin_src elisp
(defun suzu/set-project-env ()
  "Export all environment variables in the closest .env file."

  (let ((env-file (suzu/find-env-file)))
    (when env-file
      (load-env-vars env-file))))
#+end_src

Install package for loading ~.env~ & setup hooks
#+begin_src elisp
(use-package load-env-vars
  :hook
  (eshell-mode . suzu/set-project-env)
  (prog-mode . suzu/set-project-env))
#+end_src


** Imenu
#+begin_src elisp
(use-package imenu
  :bind
  ("M-i" . imenu))
#+end_src

* Essential tweaks
*** Indents
#+begin_src elisp
(setq-default indent-tabs-mode nil)
(electric-indent-mode t)
(setq-default electric-indent-inhibit t)
(setq backward-delete-char-untabify-method 'hungry)
#+end_src

#+begin_src elisp
(use-package
 indent-guide
 :custom (indent-guide-char "│")
 :config (add-hook 'prog-mode-hook 'indent-guide-mode))
#+end_src

*** Line numbers
#+begin_src elisp
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
(add-hook 'org-mode-hook 'display-line-numbers-mode)
(add-hook 'compilation-mode-hook 'display-line-numbers-mode)
(add-hook 'conf-mode-hook 'display-line-numbers-mode)
(dolist (mode '(pdf-view-mode-hook
                term-mode-hook
                eshell-mode-hook
                vterm-mode-hook
                imenu-list-minor-mode-hook
                imenu-list-major-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode -1))))
(setq-default display-line-numbers-type 'relative)
#+end_src

*** Scroll margin
#+begin_src elisp
(setq-default scroll-margin 7)
#+end_src

*** Autopairs
#+begin_src elisp
(electric-pair-mode 1)
#+end_src

*** UI tweaks
#+begin_src elisp
(menu-bar-mode -1)           ;; Disable the menu bar
(scroll-bar-mode -1)         ;; Disable the scroll bar
(tool-bar-mode -1)           ;; Disable the tool bar
#+end_src

*** Pulse current line
#+begin_src elisp
(use-package pulsar
  :general
  (general-define-key
   :prefix "C-x"
   :keymaps '(global)
   "l" '(pulsar-pulse-line-cyan :wk "Pulse current line")))
#+end_src

*** Delete on paste
#+begin_src elisp
(setq-default delete-selection-mode t)
#+end_src

*** Stop wierd files creation 
#+begin_src elisp
(setq create-lockfiles nil)
(setq-default auto-save-default nil)
#+end_src

*** Automatically update buffer contents 
#+begin_src elisp
(global-auto-revert-mode t)
#+end_src

*** Automatically select help frame
#+begin_src elisp
(setq help-window-select t)
#+end_src

*** Do not truncate lines
#+begin_src elisp
(setq-default truncate-lines t)
#+end_src

*** Remember command history
#+begin_src elisp
(setq-default history-length 25)
(savehist-mode 1)
#+end_src

*** Remember last location in files
#+begin_src elisp
(save-place-mode 1)
#+end_src

*** Do not use dialogue box
#+begin_src elisp
(setq use-dialog-box nil)
#+end_src

*** Update changed files automaticaaly
#+begin_src elisp
(global-auto-revert-mode 1)
#+end_src

*** Regex Replace
#+begin_src elisp
(use-package visual-regexp-steroids
  :general
  (general-define-key
   :prefix "C-c"
   "r" '(vr/replace :wk "Visual regexp replaceq")
   "q" '(vr/replace :wk "Visual regexp query replace")))
#+end_src

** Emoji
#+begin_src elisp
(use-package emojify)
;; :hook (after-init . global-emojify-mode)
#+end_src

** Source code block tag expansion
#+begin_src elisp
(with-eval-after-load 'org
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src elisp"))
  (add-to-list 'org-structure-template-alist '("sq" . "src sql"))
  (add-to-list 'org-structure-template-alist '("sqt" . "src sql :var table=table-name"))
  (add-to-list 'org-structure-template-alist '("py" . "src python")))
#+end_src

#+begin_src elisp
;; (add-hook 'org-mode-hook
;;   (lambda ()
;;     (setq-local electric-pair-inhibit-predicate
;;       `(lambda (c)
;;         (if (char-equal c "<") t (electric-pair-inhibit-predicate c))))))
#+end_src

** Visual fill column (center buffer)
#+begin_src elisp
(defun suzu/visual-fill ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :disabled
  :config
  :hook
  (org-mode . suzu/visual-fill)
  (dired-mode . suzu/visual-fill)
  (eshell-mode . suzu/visual-fill)
  (term-mode . suzu/visual-fill)
  (shell-mode . suzu/visual-fill)
  (prog-mode . suzu/visual-fill)
  (info-mode . suzu/visual-fill)
  (text-mode . suzu/visual-fill))
#+end_src

* Org mode
** Base
*** Main setup function
#+begin_src elisp
(defun suzu/org-mode-setup ()
  (setq org-ellipsis " ▾")
  (setq org-edit-src-content-indentetion 0)
  (setq-default org-edit-src-content-indentation 0) ;; Set src block automatic indent to 0 instead of 2
  (setq org-imenu-depth 4)
  (setq-default org-image-actual-width nil)
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•")))))))
#+end_src

*** Prettify symbols
#+begin_src elisp
(defun suzu/org-icons ()
  "Beautify org mode keywords."
  (setq prettify-symbols-alist '(("[#A]" . "")
                                 ("[#B]" . "")
                                 ("[#C]" . "")
                                 ("[ ]" . "")
                                 ("[X]" . "")
                                 ("[-]" . "")
                                 ("#+begin_src" . "")
                                 ("#+end_src" . "")
                                 (":properties:" . "")
                                 (":PROPERTIES:" . "")
                                 (":end:" . "―")
                                 (":END:" . "―")
                                 (":ID:" . "")
                                 ("#+startup:" . "")
                                 ("#+title: " . "")
                                 ("#+results:" . "")
                                 ("#+name:" . "")
                                 ("#+roam_tags:" . "")
                                 ("#+filetags:" . "")
                                 ("#+html_head:" . "")
                                 ("#+subtitle:" . "")
                                 ("#+author:" . "")
                                 ("#+description:" . "󰦨")
                                 (":effort:" . "")
                                 ("*" . "󰣏")
                                 ("**" . " 󱀝")
                                 ("***" . "  ")
                                 ("****" . "   ")
                                 ("*****" . "    ")
                                 ("******" . "     ")
                                 ("scheduled:" . "")
                                 ("#+auto_tangle: t" . "󰁪")
                                 ("deadline:" . "")))
  (prettify-symbols-mode))
#+end_src

*** Custom hook
#+begin_src elisp
(defun suzu/org-mode-hook ()
  (require 'suzu-org-indent)
  (setq org-indent-mode-turns-on-hiding-stars nil)
  (org-indent-mode)
  (suzu/org-icons)
  (set-face-attribute 'org-level-1 nil :height 1.5)
  (set-face-attribute 'org-level-2 nil :height 1.35)
  (set-face-attribute 'org-level-2 nil :height 1.2)
  (visual-line-mode 1))
#+end_src

*** Actual setup
#+begin_src elisp
(use-package org
  :pin org
  :commands (org-capture org-agenda)
  :config
  (suzu/org-mode-setup)
  :hook (org-mode . suzu/org-mode-hook)j
  :bind
  ("C-c l" . org-store-link))
#+end_src

*** Tags
#+begin_src elisp
(setq org-tag-alist
      '(("project") ("idea") ("post") ("feature") ("improve") ("bug")))
#+end_src

** Table of contents
#+begin_src elisp
(use-package toc-org
  :commands toc-org-enable
  :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Babel
*** Base
#+begin_src elisp
(setq org-confirm-babel-evaluate nil)

(setq org-babel-default-header-args
      '((:results . "replace")))

(org-babel-do-load-languages
 'org-babel-load-languages
 '((shell . t)
   (python . t)
   (sqlite . t)
   (emacs-lisp . t)
   (plantuml . t)
   ;; (restclient . t)
   (plantuml . t)
   (awk . t)
   (sql . t)))
#+end_src

*** Auto tangle
#+begin_src elisp
(use-package org-auto-tangle
  :hook (org-mode . org-auto-tangle-mode))
#+end_src

*** Run source block hook
Sometimes I want run some scripts on saving files
So it'll be nice to run them automatically

#+begin_src elisp
(defun suzu/run-after-tangle-hook ()
    (add-hook 'org-bable-tangle-finished-hook (lambda () (org-babel-ref-resolve "run-after-save"))))

;; (add-hook 'org-mode-hook 'suzu/org-babel-run-after-save-hook)
#+end_src

*** Plant UML
#+begin_src elisp
;; (setq org-plantuml-jar-path (expand-file-name "~/.local/bin/plantuml.jar"))
;; (setq plantuml-exec-mode 'jar)
(add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
(org-babel-do-load-languages 'org-babel-load-languages '((plantuml . t)))
#+end_src

** Roam
#+begin_src elisp
(use-package org-roam
  :disabled
  :config
  (org-roam-db-autosync-mode))
#+end_src

** Present
#+begin_src elisp
(use-package
 org-present
 :disabled
 :config
 (add-hook
  'org-present-mode-hook
  (lambda ()
    (org-present-big)
    (org-display-inline-images)
    (org-present-hide-cursor)
    (org-present-read-only)))
 (add-hook
  'org-present-mode-quit-hook
  (lambda ()
    (org-present-small)
    (org-remove-inline-images)
    (org-present-show-cursor)
    (org-present-read-write))))
#+end_src

** Agenda
*** Base
#+begin_src elisp
(setq org-directory (expand-file-name "~/notes/org"))
(setq org-agenda-files '((expand-file-name "~/notes/org")))
(setq org-agenda-start-with-log-mode t)
(setq org-log-done 'time)
(setq org-log-into-drawer t)
#+end_src

*** Custom todo states
#+begin_src elisp
(setq org-todo-keywords
  '((sequence "BACKLOG(b)" "TODO(t)" "|" "DONE(d!)")
    (sequence "INPROGRESS(p)" "INTEST(v)" "HOLD(h)" "|" "COMPLETED(c)" "CANCELED(k@)")))
#+end_src

*** Custom view
#+begin_src elisp
(setq org-agenda-custom-commands
  '(("d" "Dashboard"
     ((agenda "" ((org-deadline-warning-days 7)))
      (todo "NEXT"
        ((org-agenda-overriding-header "Next Tasks")))
      (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

    ("n" "Next Tasks"
     ((todo "NEXT"
        ((org-agenda-overriding-header "Next Tasks")))))


    ("W" "Work Tasks" tags-todo "+work")

    ;; Low-effort next actions
    ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
     ((org-agenda-overriding-header "Low Effort Tasks")
      (org-agenda-max-todos 20)
      (org-agenda-files org-agenda-files)))

    ("w" "Workflow Status"
     ((todo "WAIT"
            ((org-agenda-overriding-header "Waiting on External")
             (org-agenda-files org-agenda-files)))
      (todo "REVIEW"
            ((org-agenda-overriding-header "In Review")
             (org-agenda-files org-agenda-files)))
      (todo "PLAN"
            ((org-agenda-overriding-header "In Planning")
             (org-agenda-todo-list-sublevels nil)
             (org-agenda-files org-agenda-files)))
      (todo "BACKLOG"
            ((org-agenda-overriding-header "Project Backlog")
             (org-agenda-todo-list-sublevels nil)
             (org-agenda-files org-agenda-files)))
      (todo "READY"
            ((org-agenda-overriding-header "Ready for Work")
             (org-agenda-files org-agenda-files)))
      (todo "ACTIVE"
            ((org-agenda-overriding-header "Active Projects")
             (org-agenda-files org-agenda-files)))
      (todo "COMPLETED"
            ((org-agenda-overriding-header "Completed Projects")
             (org-agenda-files org-agenda-files)))
      (todo "CANC"
            ((org-agenda-overriding-header "Cancelled Projects")
             (org-agenda-files org-agenda-files)))))))
#+end_src

** Templates
#+begin_src elisp
(setq org-capture-templates
  '(    ;; ... other templates

    ("j" "Journal Entry"
         entry (file+datetree "~/journal.org")
         "* %?"
         :empty-lines 1)

        ;; ... other templates
    ))
#+end_src

* PDF tools
#+begin_src elisp
(defun suzu/pdf-setup-hook ()
  (setq blink-cursor-mode nil))

(use-package pdf-tools
  :disabled
  :config
  (pdf-tools-install)
  (add-hook 'pdf-view-mode-hook 'suzu/pdf-setup-hook))
#+end_src

#+begin_src elisp
(defun suzu/find-pdf-file ()
  (interactive)
  (let* ((places '("~/Downloads" "~/Documents/books"))
         (files-from-places (mapcar (lambda (place) (directory-files place t "\\.pdf$")) places))
         (files (my/flatten-list files-from-places))
         (file (completing-read "Choose PDF file: " files)))
    (find-file file)))
#+end_src

* Project
** Register not only ~.git~ dirs
#+begin_src elisp
(defun my/dir-contains-project-marker (dir)
  "Checks if `.project' file is present in directory at DIR path."
  (let ((project-marker-path (file-name-concat dir ".project")))
    (when (file-exists-p project-marker-path)
       dir)))

(customize-set-variable 'project-find-functions
                        (list #'project-try-vc
                              #'my/dir-contains-project-marker))
#+end_src

** Compilation
*** Ansi colors
#+begin_src elisp
(use-package ansi-color)

(defun suzu/ansi-colorize-buffer ()
  (let ((buffer-read-only nil))
    (ansi-color-apply-on-region (point-min) (point-max))))
(add-hook 'compilation-filter-hook 'suzu/ansi-colorize-buffer)


#+end_src

*** Remember all compilation buffer names
#+begin_src elisp
(defvar my/global-compilation-buffer-names-list nil
  "List of names of each compilation buffer")

(defun my/compilation-hook (process)
  (unless (member
           (buffer-name) my/global-compilation-buffer-names-list)
    (push (buffer-name) my/global-compilation-buffer-names-list)))

(add-hook 'compilation-start-hook 'my/compilation-hook)
#+end_src

*** Hotkeys
#+begin_src elisp
;; (evil-define-key '(normal insert visual) compilation-mode-map (kbd "C-k") 'suzu/window-up)
;; (evil-define-key '(normal insert visual) compilation-mode-map (kbd "C-j") 'suzu/window-down)
#+end_src

*** Increase line length to hide
#+begin_src elisp
(setq-default compilation-max-output-line-length 5000)
#+end_src

*** Special buffer name
#+begin_src elisp
(setq compilation-buffer-name-function
      'project-persp-compilation-buffer-name-function)
#+end_src

** Build from Makefile
#+begin_src elisp
(use-package
 make-project
 :vc (:url "https://github.com/scipunch/make-project")
 :general
 (general-define-key
  :prefix
  "C-x"
  "p c"
  '(make-project-run :wk "Compile from project Makefile targets")))
#+end_src

** Follow compilation
#+begin_src elisp
(setq compilation-scroll-output t)
#+end_src

* Completion
** Vertico
*** Add annotations to completion
#+begin_src elisp
(use-package marginalia
  :custom
  (marginalia-max-relative-age 0)
  (marginalia-align 'left)
  :init
  (marginalia-mode))
#+end_src

*** Add icons
#+begin_src elisp
(use-package all-the-icons-completion
  :after (marginalia all-the-icons)
  :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
  :init
  (all-the-icons-completion-mode)
  (add-hook 'marginalia-mode-hook #'all-the-icons-completion-marginalia-setup))
#+end_src

*** Actual setup
#+begin_src elisp
(use-package vertico
  :custom
  (vertico-count 13)
  (vertico-resize nil)
  (vertico-cycle nil)
  :config
  (vertico-mode))
#+end_src

*** Better vertico search something
#+begin_src elisp
(use-package consult
  :general
  (general-define-key
   :prefix "C-x"
   "B" '(consult-buffer :wk "Search all buffers")
   "b" '(consult-project-buffer :wk "Search project buffers"))
  (general-define-key
   :prefix "M-g"
   "i" '(consult-imenu :wk "Imenu"))
  (general-define-key
   :prefix "C-;"
   "o" '(consult-outline :wk "Outline")
   "i" '(consult-line :wk "Search line")
   ";" '(consult-ripgrep :wk "Ripgrep")))
#+end_src

* Rainbow mode
#+begin_src elisp
(use-package rainbow-mode
  :diminish
  :hook
  ((org-mode prog-mode) . rainbow-mode))
#+end_src

* Shells and terminals
** Shell
Turn off duplicating lines on execution
#+begin_src elisp
(setq comint-input-ignoredups t)
(setq shell-file-name "bash")
#+end_src

** Eshell
*** Add git to the prompt
#+begin_src elisp
(use-package eshell-git-prompt
  :ensure t)
#+end_src

*** Aliases
#+begin_src elisp
(setq suzu/eshell-aliases
      '((g  . magit)
        (gl . magit-log)
        (d  . dired)
        (o  . find-file)  
        (oo . find-file-other-window)))

(mapc (lambda (alias)
        (defalias (car alias) (cdr alias)))
      suzu/eshell-aliases)
#+end_src

*** Main setup function
#+begin_src elisp
(defun suzu/configure-eshell ()
  (add-hook 'eshell-pre-command-hook 'eshell-save-some-history))
#+end_src

*** Setup eshell
#+begin_src elisp
(use-package eshell
  :hook (eshell-first-time-mode . suzu/configure-eshell)
  :config
  ;; (eshell-git-prompt-use-theme 'powerline)
  (setq eshell-history-size         10000
        eshell-buffer-maximum-lines 10000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t
        eshell-rc-script (concat user-emacs-directory "eshell/profile")
        eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
        eshell-destroy-buffer-when-process-dies t
        ;; eshell-prompt-function 'suzu/eshell-prompt
        ;; eshell-prompt-regexp suzu/eshell-prompt-regexp
        eshell-prompt-function (lambda () "A simple prompt." "󰘧 ")
        eshell-prompt-regexp "^󰘧 "
        eshell-visual-commands '("bash" "fish" "htop" "ssh" "top" "zsh" "paru")))
#+end_src

*** Fish like prompt highlight
#+begin_src elisp
(use-package eshell-syntax-highlighting
  :config
  (eshell-syntax-highlighting-global-mode +1))
#+end_src

*** Toggle eshell
#+begin_src elisp
(use-package eshell-toggle
  :custom
  (eshell-toggle-window-side 'above)
  (eshell-toggle-size-fraction 3)
  (eshell-toggle-use-projectile-root nil)
  (eshell-toggle-use-git-root t)
  (eshell-toggle-run-command nil))
#+end_src

*** Better completions
#+begin_src elisp
(use-package pcmpl-args
  :ensure t)
#+end_src

*** Run command in background
#+begin_src elisp
(defun eshell/asc (cmd)
  "Runs `cmd` in async bash shell"
  (async-shell-command (format "bash -c '%s'" cmd)))
(put 'eshell/asc 'eshell-no-numeric-conversions t)
#+end_src

*** History search
#+begin_src elisp
(defun my/eshell-history ()
  (interactive)
  (insert
   (completing-read
    "Eshell history: "
    (delete-dups (ring-elements eshell-history-ring)))))

(general-define-key
 :keymaps
 '(eshell-mode-map)
 "C-r"
 '(my/eshell-history :wk "Search eshell history")
 "C-l"
 '((lambda () (interactive) (eshell/clear-scrollback)) :wk "Clear scrollback"))
#+end_src

** Vterm
#+begin_src elisp
(use-package vterm
  :config
  (setq 
        vterm-max-scrollback 5000)

  (defun vterm-completion ()
    (interactive)
    (vterm-directory-sync)
    (setq vterm-chosen-item (vterm-completion-choose-item))
    (when (thing-at-point 'word)
      (vterm-send-meta-backspace))
    (vterm-send-string vterm-chosen-item))

  (defun vterm-directory-sync ()
    "Synchronize current working directory."
    (interactive)
    (when vterm--process
      (let* ((pid (process-id vterm--process))
             (dir (file-truename (format "/proc/%d/cwd/" pid))))
        (setq default-directory dir)))))
#+end_src

** Vterm-toggle
#+begin_src elisp
(use-package
 vterm-toggle
 :vc (:url "https://github.com/scipunch/vterm-toggle")
 :after vterm
 :config
 (setq vterm-toggle-fullscreen-p nil)
 (setq vterm-toggle-scope 'project)
 (add-to-list
  'display-buffer-alist
  '("\\*vterm\\*.*"
    (display-buffer-reuse-window display-buffer-in-side-window)
    (reusable-frames . visible)
    (side . top))))
#+end_src

** Powershell
#+begin_src elisp
(defun run-powershell ()
  "Run powershell"
  (interactive)
  (async-shell-command "c:/Users/suzu/AppData/Local/Microsoft/WindowsApps/pwsh.exe -Command -"
               nil
               nil))
#+end_src

* Sudo edit
#+begin_src elisp
(use-package
 sudo-edit
 :ensure t
 :config
 (defun my/sudo-edit-find-file ()
   (interactive)
   (let ((SHELL (getenv "SHELL")))
     (setenv "SHELL" "/usr/bin/bash")
     (call-interactively 'sudo-edit-find-file)
     (setenv "SHELL" SHELL))))
#+end_src

* TLDR
#+begin_src elisp
(use-package tldr :ensure t)
#+end_src

* Transparency
#+begin_src elisp
(add-to-list 'default-frame-alist '(alpha-background . 100))
(add-to-list 'corfu--frame-parameters '(alpha-background . 100))
#+end_src

* Treesitter
#+begin_src elisp
(setq treesit-language-source-alist
      '((rust "https://github.com/tree-sitter/tree-sitter-rust")
        (python "https://github.com/tree-sitter/tree-sitter-python")
        (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "v0.20.3" "typescript/src")
        (javascript "https://github.com/tree-sitter/tree-sitter-javascript")
        (go "https://github.com/tree-sitter/tree-sitter-go")
        (gomod "https://github.com/camdencheek/tree-sitter-go-mod")
        (json "https://github.com/tree-sitter/tree-sitter-json")
        (make "https://github.com/alemuller/tree-sitter-make")
        (emacs-lisp "https://github.com/emacs-tree-sitter/elisp-tree-sitter")
        (nu "https://github.com/nushell/tree-sitter-nu")        
        (c-sharp "https://github.com/tree-sitter/tree-sitter-c-sharp")))

(setq treesit-font-lock-level 4)
(setq major-mode-remap-alist
      '((python-mode . python-ts-mode)
        (rust-mode . rust-ts-mode)))
#+end_src

* Which-key
#+begin_src elisp
(use-package which-key
  :diminish
  :init
  (which-key-mode)
  :config
  (setq which-key-popup-type 'side-window
        which-key-side-window-max-height 0.50))
#+end_src

* Workspaces
** Install perspective
#+begin_src elisp
(use-package perspective
  :init
  (setq persp-suppress-no-prefix-key-warning t)
  (persp-mode)
  :general
  (general-define-key
   "C-z" '(perspective-map :wk "Perspective"))
  (general-define-key
   :prefix "C-z"
   "l" '(persp-switch-last :wk "Last perspective")
   "p" '(project-persp-switch :wk "Open project in a new perspective")))
#+end_src

** Group buffers in ibuffer by perspective
#+begin_src elisp
(add-hook 'ibuffer-hook
          (lambda ()
            (persp-ibuffer-set-filter-groups)
            (unless (eq ibuffer-sorting-mode 'alphabetic)
              (ibuffer-do-sort-by-alphabetic))))
#+end_src

* GPTel
#+begin_src elisp
(use-package gptel :ensure t :config (setq gptel-log-level 'info)
  :config
  (setq gptel-default-mode 'org-mode)
  :general
  (general-define-key
   :prefix "C-x"
   "c" '(gptel-menu :wk "GPT menu")))

(use-package elysium
  :custom
  (elysium-window-size 0.33)
  (elysium-window-style 'vertical)
  :general
  (general-define-key
   :prefix "C-c"
   "p" '(elysium-query :wk "Elysium query")))
#+end_src

* Helpful
#+begin_src elisp
(use-package helpful
  :commands (helpful-callable helpful-variable helpful-command helpful-key)
  :bind
  ([remap describe-function] . helpful-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . helpful-variable)
  ([remap describe-key] . helpful-key))
#+end_src

* Tramp
#+begin_src elisp
(setq remote-file-name-inhibit-cache nil)
(setq vc-ignore-dir-regexp
      (format "%s\\|%s"
                    vc-ignore-dir-regexp
                    tramp-file-name-regexp))
(setq tramp-verbose 1)
#+end_src

* ENV setup
** Path
#+begin_src elisp
(add-to-list 'exec-path (expand-file-name "~/.pyenv/bin"))
(add-to-list 'exec-path (expand-file-name "~/.local/bin"))
(setenv "PATH" (concat (mapconcat #'identity exec-path path-separator) (getenv "PATH")))
#+end_src

* Resize with mouse
#+begin_src elisp
(add-to-list 'default-frame-alist '(drag-internal-border . 1))
(add-to-list 'default-frame-alist '(internal-border-width . 5))
#+end_src

* Show current datetime
#+begin_src elisp
(defun me/display-current-time ()
  "Display the current time in the minibuffer."
  (interactive)
  (message (format-time-string "Current datetime: %Y-%m-%d %H:%M:%S")))

(general-define-key
 :keymaps '(global-map)
 "M-t" '(me/display-current-time :wk "Display datetime"))

#+end_src

* Snippets
#+begin_src elisp
(use-package
 yasnippet
 :config
 (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
 (yas-global-mode 1))
(use-package consult-yasnippet
  :after yasnippet
  :bind ("M-p" . consult-yasnippet))
#+end_src

* Region search
#+begin_src elisp
(defun my/occur-regions ()
  (interactive)
  (occur (format "^%s begin-region -- .*$" comment-start)))

(use-package
 emacs
 :bind ("M-s r" . my/occur-regions))
#+end_src

* Display buffer alist
** Helpers
#+begin_src elisp
(defun my-window-select-fit-size (window)
  "Select WINDOW and resize it.
The resize pertains to the maximum and minimum values"
  (select-window window)
  (fit-window-to-buffer
   window (floor (frame-height) 4) 10 (floor (frame-width) 4) 20))
#+end_src

** Occur
#+begin_src elisp
(add-to-list
  'display-buffer-alist
  '("\\*Occur\\*"
    (display-buffer-reuse-mode-window display-buffer-below-selected)
    (dedicated . t)
    (body-function . my-window-select-fit-size)))
#+end_src

** Xref
#+begin_src elisp
(add-to-list
  'display-buffer-alist
  '("\\*xref\\*"
    (display-buffer-reuse-mode-window display-buffer-below-selected)
    (dedicated . t)
    (body-function . my-window-select-fit-size)))
#+end_src

* Free keys
#+begin_src elisp
(use-package free-keys
  :vc (:url "https://github.com/Fuco1/free-keys"))
#+end_src

#+begin_src elisp
(blink-cursor-mode t)
#+end_src

* Moving between windows and buffers
#+begin_src elisp
(use-package
 buffer-move
 :bind
 ("<C-S-up>" . buf-move-up)
 ("<C-S-down>" . buf-move-down)
 ("<C-S-left>" . buf-move-left)
 ("<C-S-right>" . buf-move-right))
#+end_src

#+begin_src elisp
(use-package
 emacs
 :bind
 ("<C-up>" . windmove-up)
 ("<C-right>" . windmove-right)
 ("<C-left>" . windmove-left)
 ("<C-down>" . windmove-down))
#+end_src

