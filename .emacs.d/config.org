#+title: GNU Emacs Config
#+author: SciPunch
#+description: My personal config

* Ideas
- Open project's makefile by key bind
- Add to makefile default language specific commands
  - Rust: cargo, shuttle
  - Python: poetry
- Simulate single mode-line when multiple windows opened
- Check spell using tree-sitter and Ispell/Aspell. The key is to check only custom named nodes (like class, function, variable, string and etc.). Make it independent from Emacs to use as pre-commit hook or in any CI/CD pipeline

* Important things to load first

** Path

#+begin_src elisp
(add-to-list 'exec-path (expand-file-name "~/.pyenv/bin"))
(add-to-list 'exec-path (expand-file-name "~/.local/bin"))
(setenv "PATH" (concat (mapconcat #'identity exec-path path-separator) (getenv "PATH")))
#+end_src

** Native compile

#+begin_src elisp
(setq native-comp-speed 2) ;; maximum native Elisp speed!
(native-compile-async "~/.emacs.d" 'recursively)
(custom-set-variables '(warning-suppress-types '((comp))))
#+end_src

** Loading scripts

#+begin_src elisp
(add-to-list 'load-path (expand-file-name "scripts/" user-emacs-directory))
#+end_src

** Setup package manager

#+begin_src elisp
(require 'package-manager)
#+end_src

** Upgrade GC

#+begin_src elisp
(use-package gcmh
  :diminish gcmh-mode
  :init
  (gcmh-mode 1))
#+end_src

** Debug on error

#+begin_src elisp
(setq-default debug-on-error nil)
#+end_src

** Profiling

#+begin_src elisp
(setq use-package-compute-statistics nil)
#+end_src

** Diminish

#+begin_src elisp
(use-package diminish)
#+end_src

** All the icons

#+begin_src elisp
(use-package all-the-icons)
(use-package all-the-icons-dired
  :diminish all-the-icons-dired-mode
  :after all-the-icons
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

* Dev

** Common

*** Dumb jump

#+begin_src elisp
(use-package dumb-jump
  :config
  (add-hook 'xref-backend-functions #'dumb-jump-xref-activate))
#+end_src

*** Eldoc

#+begin_src elisp
(use-package eldoc
  :diminish eldoc-mode)
#+end_src

*** Treesitter

#+begin_src elisp
(setq treesit-font-lock-level 4)
(defun my/treesit-install-grammars ()
  "Install Tree-sitter grammars if they are absent."
  (interactive)
  (dolist (grammar
           '((css
              .
              ("https://github.com/tree-sitter/tree-sitter-css"
               "v0.20.0"))
             (bash "https://github.com/tree-sitter/tree-sitter-bash")
             (html
              .
              ("https://github.com/tree-sitter/tree-sitter-html"
               "v0.20.1"))
             (javascript
              .
              ("https://github.com/tree-sitter/tree-sitter-javascript"
               "v0.21.2"
               "src"))
             (json
              .
              ("https://github.com/tree-sitter/tree-sitter-json"
               "v0.20.2"))
             (python
              .
              ("https://github.com/tree-sitter/tree-sitter-python"
               "v0.20.4"))
             (go
              "https://github.com/tree-sitter/tree-sitter-go"
              "v0.20.0")
             (markdown
              "https://github.com/ikatyang/tree-sitter-markdown")
             (make "https://github.com/alemuller/tree-sitter-make")
             (elisp "https://github.com/Wilfred/tree-sitter-elisp")
             (cmake "https://github.com/uyha/tree-sitter-cmake")
             (c "https://github.com/tree-sitter/tree-sitter-c")
             (cpp "https://github.com/tree-sitter/tree-sitter-cpp")
             (toml "https://github.com/tree-sitter/tree-sitter-toml")
             (tsx
              .
              ("https://github.com/tree-sitter/tree-sitter-typescript"
               "v0.20.3"
               "tsx/src"))
             (typescript
              .
              ("https://github.com/tree-sitter/tree-sitter-typescript"
               "v0.20.3"
               "typescript/src"))
             (yaml
              .
              ("https://github.com/ikatyang/tree-sitter-yaml"
               "v0.5.0"))
             (prisma
              "https://github.com/victorhqc/tree-sitter-prisma")))
    (add-to-list 'treesit-language-source-alist grammar)
    (unless (treesit-language-available-p (car grammar))
      (treesit-install-language-grammar (car grammar)))))
(my/treesit-install-grammars)
#+end_src

*** Toggle comments

#+begin_src elisp
(use-package emacs
  :bind
  ("C-x /" . comment-or-uncomment-region))
#+end_src

*** Auto SSH connections

#+begin_src elisp
(use-package ssh
  :load-path (lambda () (expand-file-name "scripts/ssh.el" user-emacs-directory)))
#+end_src

*** Working with ~.env~ files

Install package for loading ~.env~ & setup hooks

#+begin_src elisp
(use-package load-env-vars
  :hook
  ((eshell-mode shell-mode compilation-mode) . project-ext:dotenv-load))
#+end_src

*** Region search

#+begin_src elisp
(defun my/occur-regions ()
  (interactive)
  (occur (format "^%s begin-region -- .*$" comment-start)))

(use-package
 emacs
 :bind ("M-s r" . my/occur-regions))
#+end_src

** Languages

*** Rust

#+begin_src elisp
(use-package rust-mode)
#+end_src

*** Python

#+begin_src elisp
(use-package
 python
 :config
 (setq-default python-indent-def-block-scale 1))

(use-package python-tests
  :load-path (lambda () (expand-file-name "scripts/python-tests.el" user-emacs-directory))
  :after python
  :bind (:map python-mode-map ("C-x t r" . python-tests-run)))
#+end_src

*** Yuck

#+begin_src elisp
(use-package yuck-mode)
#+end_src

*** SQL

Literate SQL programming

#+begin_src elisp
(use-package async)
(use-package ob-async-sql
  :load-path (lambda () (expand-file-name "scripts/ob-async-sql.el" user-emacs-directory))
  :after async)
#+end_src

*** Markdown

Required for better LSP docs rendering

#+begin_src elisp
(use-package markdown-mode)
#+end_src

Generate table of contents

#+begin_src elisp
(use-package markdown-toc
  :after markdown-mode)
#+end_src

*** CSV

#+begin_src elisp
(use-package csv-mode)
#+end_src

*** Javascript

#+begin_src elisp
(setq-default js-indent-level 2)
(setq-default web-mode-code-indent-offset 2)
(setq-default typescript-ts-mode-indent-offset 2)

(add-to-list 'auto-mode-alist '("\\.tsx\\'" . tsx-ts-mode))
(add-to-list 'auto-mode-alist '("\\.jsx\\'" . tsx-ts-mode))
(add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-ts-mode))
(add-to-list 'auto-mode-alist '("\\.js\\'" . typescript-ts-mode))

(defun my/web-mode-hook ()
  "Hooks for Web mode."
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-enable-auto-pairing t))

(use-package
 web-mode
 :mode (("\\.html?\\'" . web-mode))
 :hook (web-mode-hook . my/web-mode-hook))
#+end_src

#+begin_src elisp
(add-to-list
 'compilation-error-regexp-alist-alist
 '(biome-lint
   "^\\(.*\\):\\([0-9]+\\):\\([0-9]+\\)\s.*\s‚îÅ+$" 1 2 3 2 1))
(add-to-list 'compilation-error-regexp-alist 'biome-lint)

(add-to-list
 'compilation-error-regexp-alist-alist
 '(tsc
   "^\\(.*\\):\\([0-9]+\\):\\([0-9]+\\)\s-\serror\s.*$" 1 2 3 2 1))
(add-to-list 'compilation-error-regexp-alist 'tsc)
#+end_src

*** Emacs Lisp

#+begin_src elisp
(defun my/eval-buffer-and-print ()
  (interactive)
  (eval-buffer)
  (message "Buffer evaluated"))

(defun my/emacs-lisp-mode-hook ()
  (flymake-mode)
  (keymap-set emacs-lisp-mode-map "C-c C-f" 'elisp-autofmt-buffer)
  (keymap-set emacs-lisp-mode-map "C-x C-b" 'my/eval-buffer-and-print))

(use-package
 elisp-autofmt
 :hook (emacs-lisp-mode-hook . my/emacs-lisp-mode-hook))

(with-eval-after-load 'flymake
  (setq elisp-flymake-byte-compile-load-path load-path))
#+end_src

*** Tex

#+begin_src elisp
(use-package tex-mode)
#+end_src

*** CSS

#+begin_src elisp
(use-package css-mode)
#+end_src

*** Docker

#+begin_src elisp
(use-package dockerfile-mode)
#+end_src

*** Plant UML

#+begin_src elisp
(use-package
 plantuml-mode
 :custom
 (org-plantuml-jar-path "/usr/share/java/plantuml/plantuml.jar")
 (plantuml-default-exec-mode 'jar)
 (plantuml-jar-path org-plantuml-jar-path)
 (plantuml-indent-level 2)
 (plantuml-output-type "png")
 :hook
 (plantuml-mode-hook . display-line-numbers-mode))
#+end_src

** Compilation

*** Ansi colors

#+begin_src elisp
(use-package
 ansi-color
 :config
 (defun my/ansi-colorize-buffer ()
   (let ((buffer-read-only nil))
     (ansi-color-apply-on-region (point-min) (point-max))))
 :hook (compilation-filter-hook . my/ansi-colorize-buffer))
#+end_src

*** Unified list jumps

#+begin_src elisp
(defvar my/global-compilation-buffer-names-list nil
  "List of names of each compilation buffer")

(defun my/next-error ()
  "Navigates to the next xref or flymake."
  (interactive)
  (if (seq-some
       #'my/window-with-name-visible-p
       (append
        '("*xref*" "*Occur*")
        my/global-compilation-buffer-names-list))
      (next-error)
    (flymake-goto-next-error)))

(defun my/previous-error ()
  "Navigates to the previous xref or flymake."
  (interactive)
  (if (seq-some
       #'my/window-with-name-visible-p
       (append
        '("*xref*" "*Occur*")
        my/global-compilation-buffer-names-list))
      (previous-error)
    (flymake-goto-prev-error)))

(defun my/compilation-hook (process)
  (unless (member
           (buffer-name) my/global-compilation-buffer-names-list)
    (push (buffer-name) my/global-compilation-buffer-names-list)))

(add-hook 'compilation-start-hook 'my/compilation-hook)
#+end_src

*** Increase line length to hide

#+begin_src elisp
(setq-default compilation-max-output-line-length 5000)
#+end_src

*** Follow compilation

#+begin_src elisp
(setq compilation-scroll-output t)
#+end_src

*** Binds

#+begin_src elisp
(use-package
 emacs
 :bind
 ("<f8>" . recompile)
 ("<f9>" . project-compile)
 ("M-]" . my/next-error)
 ("M-[" . my/previous-error))
#+end_src

** Snippets

*** Yasnippet

#+begin_src elisp
(use-package
 yasnippet
 :diminish (yas-minor-mode yas-global-mode)
 :config
 (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
 (yas-global-mode 1))
#+end_src

** Flymake

#+begin_src elisp
(defun my/show-buffer-diagnostics ()
  (interactive)
  (flymake-show-buffer-diagnostics)
  (message "Buffer diagnostics")
  (other-window 1))

(use-package flymake :bind ("<f5>" . my/show-buffer-diagnostics))
#+end_src

* UI\UX

** Default frame setup

#+begin_src elisp
(add-to-list 'default-frame-alist '(fullscreen . maximized))
(add-to-list 'default-frame-alist '(undecorated . t))
#+end_src

#+begin_src elisp
(setq-default
 left-margin-width 1
 right-margin-width 0)
(add-to-list 'default-frame-alist '(left-fringe . 0))
(add-to-list 'default-frame-alist '(right-fringe . 0))
#+end_src

** Theme

#+begin_src elisp
(use-package
 solarized-theme
 :custom
 (solarized-high-contrast-mode-line t)
 (solarized-use-variable-pitch nil)
 :config
 (load-theme 'solarized-dark :no-confirm)
 (custom-set-faces
  '(line-number
    ((((class color) (min-colors 89))
      (:weight
       regular
       :underline nil
       :foreground "#586e75"
       :background "#002b36"))))
  '(line-number-current-line
    ((t
      (:inherit
       line-number
       :background "#002b36"
       :foreground "#839496"
       :weight bold))))
  '(org-block-begin-line
    ((t (:inherit org-meta-line :underline nil))))
  '(org-block-end-line ((t (:inherit org-meta-line :overline nil))))))
#+end_src

** Splash screen

#+begin_src elisp
(setq-default inhibit-startup-screen t)
(setq inhibit-splash-screen t)
(setq inhibit-startup-message t)
(setq initial-scratch-message "")
#+end_src

** Line numbers width

#+begin_src elisp
(setq-default display-line-numbers-width 3)
#+end_src

** Golden ratio

Automatically resizes windows to fit golden ratio

#+begin_src elisp
(use-package
 golden-ratio
 :diminish golden-ratio-mode
 :init (golden-ratio-mode 1)
 :config
 (add-hook 'ediff-startup-hook '(lambda () (golden-ratio-mode -1)) t)
 :custom
 (golden-ratio-auto-scale t)
 (golden-ratio-exclude-buffer-names '("*Occur*" "*xref*" "*Async Shell Command*")))
#+end_src

** Fonts

#+begin_src elisp
(set-face-attribute 'default nil
                    :font "Iosevka NF"
                    :height 130
                    :weight 'medium)
(set-face-attribute 'variable-pitch nil
                    :font "Iosevka NF"
                    :height 130                    
                    :weight 'medium)
(set-face-attribute 'fixed-pitch nil
                    :font "Iosevka NF"
                    :height 1.0
                    :weight 'medium)

(set-face-attribute 'font-lock-comment-face nil :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil :slant 'italic)

(add-to-list 'default-frame-alist '(font . "Iosevka NF 13"))

(setq-default line-spacing 0)
#+end_src

** Essential small tweaks

*** Cursor

#+begin_src elisp
(blink-cursor-mode t)
#+end_src

*** No backups (or `~` files)

#+begin_src elisp
(setq make-backup-files nil)
#+end_src

*** Zoom in & out

#+begin_src elisp
(use-package
 emacs
 :bind ("C-+" . text-scale-increase) ("C--" . text-scale-decrease))
#+end_src

*** System clipboard to kill ring integration

#+begin_src elisp
(setq save-interprogram-paste-before-kill t)
#+end_src

** Completion

*** Dabbrev

#+begin_src elisp
(use-package
 dabbrev
 :config
 (add-to-list 'dabbrev-ignored-buffer-modes 'doc-view-mode)
 (add-to-list 'dabbrev-ignored-buffer-modes 'pdf-view-mode)
 (defun my/dabbrev-select-buffer (other-buffer)
   (get-buffer-window other-buffer))
 (setq dabbrev-friend-buffer-function #'my/dabbrev-select-buffer))
#+end_src

*** Orderless

#+begin_src elisp
(use-package orderless
  :init
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+end_src

*** Default completion system

#+begin_src elisp
(use-package
 completion
 :config
 (setq
  completions-format 'one-column
  completions-header-format nil
  completion-show-help nil)
 :bind
 (:map
  completion-in-region-mode-map
  ("C-n" . 'minibuffer-next-completion)
  ("C-p" . 'minibuffer-previous-completion)))
#+end_src

*** Vertico

#+begin_src elisp
(use-package vertico
  :custom
  (vertico-count 13)
  (vertico-resize nil)
  (vertico-cycle nil)
  :config
  (vertico-mode))
#+end_src

*** Add annotations to completion

#+begin_src elisp
(use-package marginalia
  :custom
  (marginalia-max-relative-age 0)
  (marginalia-align 'left)
  :init
  (marginalia-mode))
#+end_src

*** Add icons

#+begin_src elisp
(use-package all-the-icons-completion
  :after (marginalia all-the-icons)
  :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
  :init
  (all-the-icons-completion-mode)
  (add-hook 'marginalia-mode-hook #'all-the-icons-completion-marginalia-setup))
#+end_src

*** Flatten imenu
#+begin_src elisp
(use-package flimenu
  :config
  (flimenu-global-mode))
#+end_src

*** Indents
#+begin_src elisp
(setq-default indent-tabs-mode nil)
(electric-indent-mode t)
(setq-default electric-indent-inhibit t)
(setq backward-delete-char-untabify-method 'hungry)
#+end_src

*** Line numbers
#+begin_src elisp
(dolist (mode
         '(prog-mode-hook
           org-mode-hook
           compilation-mode-hook
           conf-mode-hook
           text-mode
           fundamental-mode))
  (add-hook mode 'display-line-numbers-mode))

(dolist (mode
         '(pdf-view-mode-hook
           imenu-list-minor-mode-hook imenu-list-major-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode -1))))

(setq-default display-line-numbers-type 'visual)
#+end_src

*** Scroll margin
#+begin_src elisp
(setq-default scroll-margin 7)
#+end_src

*** Autopairs
#+begin_src elisp
(electric-pair-mode 1)
#+end_src

*** UI tweaks

#+begin_src elisp
(menu-bar-mode -1)           ;; Disable the menu bar
(scroll-bar-mode -1)         ;; Disable the scroll bar
(tool-bar-mode -1)           ;; Disable the tool bar
#+end_src

*** Delete on paste

#+begin_src elisp
(setq-default delete-selection-mode t)
#+end_src

*** Stop weird files creation

#+begin_src elisp
(setq create-lockfiles nil)
(setq-default auto-save-default nil)
#+end_src

*** Automatically update buffer contents

#+begin_src elisp
(global-auto-revert-mode t)
#+end_src

*** Automatically select help frame

#+begin_src elisp
(setq help-window-select t)
#+end_src

*** Do not wrap lines

#+begin_src elisp
(setq-default truncate-lines t)
#+end_src

*** Remember command history

#+begin_src elisp
(setq-default history-length 25)
(savehist-mode 1)
#+end_src

*** Remember last location in files

#+begin_src elisp
(save-place-mode 1)
#+end_src

*** Do not use dialogue box

#+begin_src elisp
(setq use-dialog-box nil)
#+end_src

** Navigation

*** Windows layout

#+begin_src elisp
(winner-mode +1) ;; Allows to restores layout after maximizing
#+end_src

*** Buffers
#+begin_src elisp
(use-package emacs
  :bind
  ("C-," . previous-buffer)
  ("C-." . next-buffer)
  ("C-x C-b" . ibuffer)
  ("C-x k" . kill-current-buffer)
  ("C-x K" . kill-buffer))
#+end_src

*** Vertical split

#+begin_src elisp
(defun my/split-right-and-switch ()
  (interactive)
  (split-window-right)
  (windmove-right))
(window-divider-mode 1)
(use-package emacs :bind ("C-x 3" . my/split-right-and-switch))
#+end_src

*** SciMotions

#+begin_src elisp
(use-package scimotions
  :load-path (lambda () (expand-file-name "scripts/scimotions.el" user-emacs-directory)))
#+end_src

*** Moving between windows and buffers

#+begin_src elisp
(use-package
 buffer-move
 :bind
 ("<C-S-up>" . buf-move-up)
 ("<C-S-down>" . buf-move-down)
 ("<C-S-left>" . buf-move-left)
 ("<C-S-right>" . buf-move-right))
#+end_src

#+begin_src elisp
(use-package
 emacs
 :bind
 ("<C-up>" . windmove-up)
 ("<C-right>" . windmove-right)
 ("<C-left>" . windmove-left)
 ("<C-down>" . windmove-down))
#+end_src

*** Scroll

#+begin_src elisp
(defun my/scroll-half-down ()
  "Scroll down half a window."
  (interactive)
  (scroll-down (floor (/ (window-height) 2))))

(defun my/scroll-half-up ()
  "Scroll up half a window."
  (interactive)
  (scroll-up (floor (/ (window-height) 2))))

(use-package emacs
  :bind
  ("C-v" . my/scroll-half-up)
  ("M-v" . my/scroll-half-down))
#+end_src

*** Select inner word

#+begin_src elisp
(defun my/visual-inner-WORD ()
  "Select the inner word at point."
  (interactive)
  (search-backward-regexp " \\|^")
  (forward-char)
  (set-mark (point))
  (search-forward-regexp " \\|$")
  (backward-char))

(use-package emacs :bind ("C-c W" . my/visual-inner-WORD))
#+end_src

*** Duplicate line

#+begin_src elisp
(use-package emacs :bind ("C-c d" . duplicate-line))
#+end_src

** Async shell command

#+begin_src elisp
(setq-default async-shell-command-buffer 'new-buffer)
#+end_src

** Stop yank on ~<C-backspace>~

#+begin_src elisp
(defun my-delete-backward-word ()
  (interactive "*")
  (push-mark)
  (backward-word)
  (delete-region (point) (mark)))
(use-package emacs
  :bind ("<C-backspace>" . my-delete-backward-word))
#+end_src

** Use eww as browser by default

#+begin_src elisp
(setq browse-url-browser-function 'eww-browse-url)
#+end_src

* Helper packages

*** Sudo edit

#+begin_src elisp
(use-package
 sudo-edit
 :ensure t
 :config
 (defun my/sudo-edit-find-file ()
   (interactive)
   (let ((SHELL (getenv "SHELL")))
     (setenv "SHELL" "/usr/bin/bash")
     (call-interactively 'sudo-edit-find-file)
     (setenv "SHELL" SHELL))))
#+end_src

*** Show current datetime

#+begin_src elisp
(defun my/display-current-time ()
  "Display the current time in the minibuffer."
  (interactive)
  (message
   (format-time-string "Current datetime: %Y-%m-%d %H:%M:%S")))
#+end_src

*** Auth source

#+begin_src elisp
(use-package auth-source
  :custom
  (auth-sources '("~/.authinfo.gpg"))
  (auth-source-debug 'trivia)
  :config
  (auth-source-pass-enable))
#+end_src

*** Free keys

#+begin_src elisp
(use-package free-keys
  :vc (:url "https://github.com/Fuco1/free-keys"))
#+end_src

* Org

** Base

*** Main setup function

#+begin_src elisp
(defun my/org-mode-setup ()
  (require 'org-tempo)
  (setq org-ellipsis " ‚ñæ")
  (setq org-return-follows-link t)
  (setq org-edit-src-content-indentetion 0)
  (setq-default org-edit-src-content-indentation 0) ;; Set src block automatic indent to 0 instead of 2
  (setq org-imenu-depth 4)
  (setq-default org-image-actual-width nil)
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "‚Ä¢")))))))
#+end_src

*** Indents

#+begin_src elisp
(use-package org-indent
  :load-path (lambda () (expand-file-name "scripts/org-indent.el" user-emacs-directory)))
#+end_src

*** Custom hook

#+begin_src elisp
(defun my/org-mode-hook ()
  (setq org-indent-mode-turns-on-hiding-stars nil)
  (org-indent-mode)
  (set-face-attribute 'org-level-1 nil :height 1.5)
  (set-face-attribute 'org-level-2 nil :height 1.35)
  (set-face-attribute 'org-level-2 nil :height 1.2)
  (visual-line-mode 1))
#+end_src

*** Actual setup

#+begin_src elisp
(use-package
 org
 :config
 (my/org-mode-setup)
 (diminish 'org-auto-tangle-mode)
 (diminish 'org-indent-mode)
 :hook (org-mode . my/org-mode-hook)
 :bind
 (:map org-mode-map ("C-," . nil))
 ("C-c l" . org-store-link)
 ("M-n" . org-next-link)
 ("M-p" . org-previous-link)
 ("C-c a" . org-agenda)
 ("C-c t" . org-timer-set-timer))
#+end_src

*** Tags

#+begin_src elisp
(setq org-tag-alist
      '(("project") ("idea") ("post") ("feature") ("improve") ("bug") ("mvp") ("backlog") ("noexport")))
#+end_src

** Table of contents

#+begin_src elisp
(use-package toc-org
  :commands toc-org-enable
  :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Babel

*** Base

#+begin_src elisp
(setq org-confirm-babel-evaluate nil)

(setq org-babel-default-header-args
      '((:results . "replace")))

(org-babel-do-load-languages
 'org-babel-load-languages
 '((shell . t)
   (python . t)
   (sqlite . t)
   (emacs-lisp . t)
   (plantuml . t)
   ;; (restclient . t)
   (plantuml . t)
   (awk . t)
   (sql . t)))
#+end_src

*** Auto tangle

#+begin_src elisp
(use-package org-auto-tangle
  :hook (org-mode . org-auto-tangle-mode))
#+end_src

*** Plant UML

#+begin_src elisp
(add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
(org-babel-do-load-languages 'org-babel-load-languages '((plantuml . t)))
#+end_src

** Agenda

*** Base

#+begin_src elisp
(setq org-directory (expand-file-name "~/notes/org"))
(setq org-agenda-files (directory-files-recursively "~/notes/org/" "\\.org$"))
(setq org-agenda-start-with-log-mode t)
(setq org-log-done 'time)
(setq org-log-into-drawer t)
#+end_src

*** Custom todo states

#+begin_src elisp
(setq org-todo-keywords
  '((sequence "TODO(t)" "|" "DONE(d!)")
    (sequence "TOREAD(tr)" "|" "READING(pr)" "|" "FINISED(f!")
    (sequence "INPROGRESS(p)" "INTEST(v)" "HOLD(h)" "|" "COMPLETED(c)" "CANCELED(k@)")))
#+end_src

*** Custom view

#+begin_src elisp
(setq org-agenda-custom-commands
  '(("d" "Dashboard"
     ((agenda "" ((org-deadline-warning-days 7)))
      (todo "NEXT"
        ((org-agenda-overriding-header "Next Tasks")))
      (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

    ("n" "Next Tasks"
     ((todo "NEXT"
        ((org-agenda-overriding-header "Next Tasks")))))


    ("W" "Work Tasks" tags-todo "+work")

    ;; Low-effort next actions
    ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
     ((org-agenda-overriding-header "Low Effort Tasks")
      (org-agenda-max-todos 20)
      (org-agenda-files org-agenda-files)))

    ("w" "Workflow Status"
     ((todo "WAIT"
            ((org-agenda-overriding-header "Waiting on External")
             (org-agenda-files org-agenda-files)))
      (todo "REVIEW"
            ((org-agenda-overriding-header "In Review")
             (org-agenda-files org-agenda-files)))
      (todo "PLAN"
            ((org-agenda-overriding-header "In Planning")
             (org-agenda-todo-list-sublevels nil)
             (org-agenda-files org-agenda-files)))
      (todo "BACKLOG"
            ((org-agenda-overriding-header "Project Backlog")
             (org-agenda-todo-list-sublevels nil)
             (org-agenda-files org-agenda-files)))
      (todo "READY"
            ((org-agenda-overriding-header "Ready for Work")
             (org-agenda-files org-agenda-files)))
      (todo "ACTIVE"
            ((org-agenda-overriding-header "Active Projects")
             (org-agenda-files org-agenda-files)))
      (todo "COMPLETED"
            ((org-agenda-overriding-header "Completed Projects")
             (org-agenda-files org-agenda-files)))
      (todo "CANC"
            ((org-agenda-overriding-header "Cancelled Projects")
             (org-agenda-files org-agenda-files)))))))
#+end_src

** Templates

#+begin_src elisp
(setq org-capture-templates
  '(    ;; ... other templates

    ("j" "Journal Entry"
         entry (file+datetree "~/journal.org")
         "* %?"
         :empty-lines 1)

        ;; ... other templates
    ))
#+end_src

** Source code block tag expansion

#+begin_src elisp
(use-package org
 :config
 (dolist (setup
          '(("sh" . "src shell")
            ("el" . "src elisp")
            ("sq" . "src sql")
            ("sqt" . "src sql :var table=table-name")
            ("py" . "src python")
            ("pu" . "src plantuml :file ")))
   (add-to-list 'org-structure-template-alist setup)))
#+end_src

* Shells and terminals

** Shell

Turn off duplicating lines on execution

#+begin_src elisp
(setq comint-input-ignoredups t)
(setq shell-file-name "bash")
#+end_src

** Eshell

*** Aliases

#+begin_src elisp
(setq my/eshell-aliases
      '((g  . magit)
        (gl . magit-log)
        (d  . dired)
        (o  . find-file-other-window)))

(mapc (lambda (alias)
        (defalias (car alias) (cdr alias)))
      my/eshell-aliases)
#+end_src

*** Setup eshell

#+begin_src elisp
(use-package
 eshell
 :hook
 (eshell-mode . completion-preview-mode)
 (eshell-pre-command-hook . eshell-save-some-history)
 :bind
 (:map
  eshell-command-mode-map
  ("C-l" .
   (lambda ()
     (interactive)
     (eshell/clear-scrollback))))
 :config
 (setq
  eshell-history-size 10000
  eshell-buffer-maximum-lines 10000
  eshell-hist-ignoredups t
  eshell-scroll-to-bottom-on-input t
  eshell-rc-script (concat user-emacs-directory "eshell/profile")
  eshell-visual-commands '("bash" "btop" "ssh" "psql")))
#+end_src

*** Run command in background

#+begin_src elisp
(defun eshell/asc (cmd)
  "Runs `cmd` in async bash shell"
  (async-shell-command cmd))
(put 'eshell/asc 'eshell-no-numeric-conversions t)
#+end_src

*** History search

#+begin_src elisp
(defun my/eshell-history ()
  (interactive)
  (insert
   (completing-read
    "Eshell history: "
    (delete-dups (ring-elements eshell-history-ring)))))
#+end_src

** Eat

#+begin_src elisp
(use-package eat
  :diminish
  eat-eshell-mode
  :config
  (add-hook 'eshell-mode-hook #'eat-eshell-mode)
  (add-hook 'eshell-mode-hook #'eat-eshell-visual-command-mode))
#+end_src

* Tools

** Jinx (spell checker)

#+begin_src elisp
(use-package
 jinx
 :config
 (dolist (hook '(org-mode-hook conf-mode-hook))
   (add-hook hook #'jinx-mode)))
#+end_src

** Tramp

#+begin_src elisp
(setq remote-file-name-inhibit-cache nil)
(setq vc-ignore-dir-regexp
      (format "%s\\|%s"
                    vc-ignore-dir-regexp
                    tramp-file-name-regexp))
(setq tramp-verbose 1)
#+end_src

** GPTel

#+begin_src elisp
(use-package
 gptel
 :config
 (setq
  gptel-log-level 'info
  gptel-default-mode 'org-mode
  gptel-model 'gemini-2.0-flash
  gptel-backend
  (gptel-make-gemini
   "Gemini"
   :key 'gptel-api-key-from-auth-source
   :stream t))
 :bind ("C-c g" . gptel-menu))
#+end_src

** Elfeed
#+begin_src elisp
(use-package
 elfeed
 :config
 (setq
  elfeed-feeds
  (quote
   (("https://www.mdpi.com/rss" research)
    ("https://protesilaos.com/interpretations.xml" philosophy)
    ("https://protesilaos.com/codelog.xml" emacs)
    ("https://pythonspeed.com/atom.xml" python)
    ("https://fabiensanglard.net/rss.xml" software)
    ("www.redblobgames.com/blog/posts.xml" math algorithms)
    ("https://www.reddit.com/r/emacsporn.rss" reddit emacs)
    ("https://opensource.com/feed" opensource linux)
    ("https://linux.softpedia.com/backend.xml" softpedia linux)
    ("https://itsfoss.com/feed/" itsfoss linux)
    ("https://www.zdnet.com/topic/linux/rss.xml" zdnet linux)
    ("https://www.computerworld.com/index.rss" computerworld linux)
    ("https://www.networkworld.com/category/linux/index.rss" networkworld linux)
    ("https://www.techrepublic.com/rssfeeds/topic/open-source/" techrepublic linux)
    ("https://systemcrafters.net/rss/news.xml" emacs)
    ("https://hnrss.org/frontpage" hackernews)
    ("http://feeds.feedburner.com/blogspot/vEnU" music jazz)
    ("https://rss.arxiv.org/rss/cs.MA" news multiagent-systems)
    ("https://www.reddit.com/r/aipromptprogramming.rss" reddit ml)
    ("https://blog.python.org/feeds/posts/default?alt=rss" python news)))))
#+end_src

** Magit

*** Magit

#+begin_src elisp
(use-package
 magit
 :custom (magit-status-buffer-switch-function 'switch-to-buffer)
 (magit-display-buffer-function
  'magit-display-buffer-same-window-except-diff-v1)
 :bind ("C-x g o" . magit) ("C-x g c" . magit-commit))
#+end_src

Actually added some

*** Gutter

#+begin_src elisp
(use-package
 git-gutter
 :diminish git-gutter-mode
 :custom
 (git-gutter:modified-sign "~")
 (git-gutter:added-sign "+")
 (git-gutter:deleted-sign "-")
 :config
 (defun my/stage-hunk ()
   "Wrapper around git-gutter:stage-hunk but without confirm requirement"
   (interactive)
   (git-gutter:awhen
    (git-gutter:search-here-diffinfo git-gutter:diffinfos)
    (git-gutter:do-stage-hunk it)
    (git-gutter:update-all-windows)
    (message "‚úÖ staged" (buffer-name))))
 (add-to-list 'git-gutter:update-hooks 'focus-in-hook)
 (add-to-list 'git-gutter:update-hooks 'magit-post-refresh-hook)
 (add-to-list 'git-gutter:update-commands 'other-window)
 :bind
 ("M-)" . git-gutter:next-hunk)
 ("M-(" . git-gutter:previous-hunk)
 ("C-x g s" . my/stage-hunk)
 :hook
 ((org-mode prog-mode) . git-gutter-mode))
#+end_src

*** Merge

#+begin_src elisp
(use-package smerge-mode
  :diminish smerge-mode)
#+end_src

*** Ediff

#+begin_src elisp
(defun my/ediff-hook ()
  (ediff-setup-keymap)
  (define-key ediff-mode-map "j" 'ediff-next-difference)
  (define-key ediff-mode-map "k" 'ediff-previous-difference)
  (golden-ratio-mode nil))

(use-package
 ediff
 :custom
 (ediff-split-window-function 'split-window-horizontally)
 (ediff-window-setup-function 'ediff-setup-windows-plain)
 :hook (ediff-mode . my/ediff-hook))
#+end_src

** Project

*** Register not only ~.git~ directories

#+begin_src elisp
(defun my/dir-contains-project-marker (dir)
  "Checks if `.project' file is present in directory at DIR path."
  (let ((project-marker-path (file-name-concat dir ".project")))
    (when (file-exists-p project-marker-path)
       dir)))

(customize-set-variable 'project-find-functions
                        (list #'project-try-vc
                              #'my/dir-contains-project-marker))
#+end_src

*** Project extensions

#+begin_src elisp
(use-package project-ext
  :load-path (lambda () (expand-file-name "scripts/project-ext.el" user-emacs-directory)))
#+end_src

*** Build from ~Makefile~

#+begin_src elisp
(use-package
 make-project
 :vc (:url "https://github.com/scipunch/make-project")
 :bind ("C-x p c" . make-project-run))
#+end_src

*** Binds

#+begin_src elisp
(defun my/project-or-default-eshell ()
  "Open eshell in project root or in the current."
  (interactive)
  (if (project-current)
      (project-eshell)
    (eshell)))

(use-package project
  :custom
  (project-mode-line t)
  :config
  (defun my/project-switch ()
    (interactive)
    (let ((project-dir (project-prompt-project-dir)))
      (setq-local project-current-directory-override project-dir)
      (project-find-file)))
  :bind
  ("C-x p e" . my/project-or-default-eshell)
  ("C-x p F" . project-root-find-file)
  ("C-x p p" . my/project-switch))
#+end_src

** Dired

#+begin_src elisp
(use-package dired-open
  :custom ((dired-listing-switches "-agho --group-directories-first")
           (dired-kill-when-opening-new-dired-buffer t))
  :config
  (setq dired-open-extensions '(("gif" . "feh")
                                ("jpg" . "feh")
                                ("jpeg" . "feh")
                                ("png" . "feh")
                                ("mkv" . "mpv")
                                ("mp4" . "mpv"))))
#+end_src

** GraphQL

#+begin_src elisp
(use-package graphql-mode :disabled)
(use-package graphql :disabled)
(use-package request :disabled)
#+end_src

** Emacs Application Framework (EAF)

#+begin_src elisp
(use-package eaf
  :disabled
  :load-path "~/.emacs.d/site-lisp/emacs-application-framework"
  :config
  (setq eaf-python-command (expand-file-name "site-lisp/.venv/bin/python3" user-emacs-directory)))

(use-package eaf-browser
  :disabled
  :after eaf
  :load-path "~/.emacs.d/site-lisp/eaf-browser"
  :custom
  (eaf-browser-enable-adblocker t)
  :config
  (defalias 'browse-web #'eaf-open-browser))
#+end_src

* Final

#+begin_src elisp
(message "Config fully loaded")
#+end_src

